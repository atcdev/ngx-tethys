{"version":3,"file":"selection-list.js","sourceRoot":"","sources":["../../../.tmp/list/selection/selection-list.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Input,\n    HostBinding,\n    ContentChildren,\n    QueryList,\n    ChangeDetectionStrategy,\n    AfterContentInit,\n    Renderer2,\n    ElementRef,\n    OnInit,\n    EventEmitter,\n    Output,\n    OnDestroy,\n    NgZone,\n    forwardRef\n} from '@angular/core';\nimport { FocusKeyManager, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    ThyListOptionComponent,\n    THY_OPTION_PARENT_COMPONENT,\n    IThyOptionParentComponent\n} from '../../core/option';\nimport { keycodes, helpers, dom } from '../../util';\nimport { inputValueToBoolean } from '../../util/helpers';\nimport { Subscription, throwError } from 'rxjs';\nimport { ThySelectionListChange } from './selection.interface';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ScrollToService } from '../../core';\n\n@Component({\n    selector: 'thy-selection-list,[thy-selection-list]',\n    template: '<ng-content></ng-content>',\n    providers: [\n        {\n            provide: THY_OPTION_PARENT_COMPONENT,\n            useExisting: ThySelectionListComponent\n        },\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ThySelectionListComponent),\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ThySelectionListComponent implements OnInit, OnDestroy, AfterContentInit, IThyOptionParentComponent, ControlValueAccessor {\n\n    private _keyManager: ActiveDescendantKeyManager<ThyListOptionComponent>;\n\n    private _selectionChangesUnsubscribe$ = Subscription.EMPTY;\n\n    private _bindKeyEventUnsubscribe: () => void;\n\n    private _modelValues: any[];\n\n    /** The currently selected options. */\n    selectionModel: SelectionModel<any>;\n\n    disabled: boolean;\n\n    @HostBinding(`class.thy-list`) _isList = true;\n\n    @HostBinding(`class.thy-selection-list`) _isSelectionList = true;\n\n    @HostBinding(`class.thy-multiple-selection-list`) multiple = true;\n\n    /** The option components contained within this selection-list. */\n    @ContentChildren(ThyListOptionComponent) options: QueryList<ThyListOptionComponent>;\n\n    @Input()\n    set thyMultiple(value: any) {\n        const previousValue = this.multiple;\n        this.multiple = inputValueToBoolean(value);\n        if (previousValue !== this.multiple) {\n            this._instanceSelectionModel();\n        }\n    }\n\n    @Input() thyBindKeyEventContainer: HTMLElement | ElementRef | string;\n\n    @Input() thyScrollContainer: HTMLElement | ElementRef | string;\n\n    @Input() thyBeforeKeydown: (event?: KeyboardEvent) => boolean;\n\n    @Input() thyUniqueKey: string;\n\n    @Input() thyCompareWith: ((o1: any, o2: any) => boolean);\n\n    /** Emits a change event whenever the selected state of an option changes. */\n    @Output() readonly thySelectionChange: EventEmitter<ThySelectionListChange> =\n        new EventEmitter<ThySelectionListChange>();\n\n    private _onTouched: () => void = () => { };\n\n    private _onChange: (value: any) => void = (_: any) => { };\n\n    private _emitChangeEvent(option: ThyListOptionComponent, event: Event) {\n        this.thySelectionChange.emit({\n            source: this,\n            value: option.thyValue,\n            option: option,\n            event: event,\n            selected: this.isSelected(option)\n        });\n    }\n\n    private _emitModelValueChange() {\n        if (this.options) {\n            let selectedValues = this.selectionModel.selected;\n            if (this.thyUniqueKey) {\n                selectedValues = selectedValues.map((selectedValue) => {\n                    const selectedOption = this.options.find((option) => {\n                        return option.thyValue[this.thyUniqueKey] === selectedValue;\n                    });\n                    if (selectedOption) {\n                        return selectedOption.thyValue;\n                    } else {\n                        return this._modelValues.find((value) => {\n                            return value[this.thyUniqueKey] === selectedValue;\n                        });\n                    }\n                });\n            }\n            this._modelValues = selectedValues;\n            let changeValue = selectedValues;\n            if (!this.multiple && selectedValues && selectedValues.length > 0) {\n                changeValue = selectedValues[0];\n            }\n            this._onChange(changeValue);\n        }\n    }\n\n    private _toggleFocusedOption(event: KeyboardEvent): void {\n        if (this._keyManager.activeItem) {\n            this.ngZone.run(() => {\n                this.toggleOption(this._keyManager.activeItem, event);\n            });\n        }\n    }\n\n    private _initializeFocusKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<ThyListOptionComponent>(this.options)\n            .withWrap()\n            // .withTypeAhead()\n            // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n            // screenreader users, that allows reading the different options of the list.\n            .skipPredicate(() => false);\n    }\n\n    private _instanceSelectionModel() {\n        this.selectionModel = new SelectionModel<any>(this.multiple);\n    }\n\n    private _getElementBySelector(element: HTMLElement | ElementRef | string): HTMLElement {\n        return dom.getHTMLElementBySelector(element, this.elementRef);\n    }\n\n    private _compareValue(value1: any, value2: any) {\n        if (this.thyCompareWith) {\n            const compareFn = this.thyCompareWith as (o1: any, o2: any) => boolean;\n            return compareFn(value1, value2);\n        } else if (this.thyUniqueKey) {\n            return value1 && value1[this.thyUniqueKey] === value2 && value2[this.thyUniqueKey];\n        } else {\n            return value1 === value2;\n        }\n    }\n\n    private _getOptionSelectionValue(option: ThyListOptionComponent) {\n        if (option.thyValue) {\n            return this.thyUniqueKey ? option.thyValue[this.thyUniqueKey] : option.thyValue;\n        } else {\n            return option;\n        }\n    }\n\n    private _setSelectionByValues(values: any[]) {\n        this.selectionModel.clear();\n        values.forEach(value => {\n            if (this.thyUniqueKey) {\n                this.selectionModel.select(value[this.thyUniqueKey]);\n            } else {\n                this.selectionModel.select(value);\n            }\n        });\n    }\n\n    private _setAllOptionsSelected(toIsSelected: boolean) {\n        // Keep track of whether anything changed, because we only want to\n        // emit the changed event when something actually changed.\n        let hasChanged = false;\n\n        this.options.forEach(option => {\n            const fromIsSelected = this.selectionModel.isSelected(option.thyValue);\n            if (fromIsSelected !== toIsSelected) {\n                hasChanged = true;\n                this.selectionModel.toggle(option.thyValue);\n            }\n        });\n\n        if (hasChanged) {\n            this._emitModelValueChange();\n        }\n    }\n\n    private _getOptionByValue(value: any) {\n        return this.options.find(option => {\n            return this._compareValue(option.thyValue, value);\n        });\n    }\n\n    private _getActiveOption() {\n        if (this._keyManager.activeItem) {\n            return this._getOptionByValue(this._keyManager.activeItem.thyValue);\n        } else {\n            return null;\n        }\n    }\n\n    constructor(\n        private renderer: Renderer2,\n        private elementRef: ElementRef,\n        private ngZone: NgZone\n    ) {\n    }\n\n    ngOnInit() {\n        const bindKeyEventElement = this._getElementBySelector(this.thyBindKeyEventContainer);\n        this.ngZone.runOutsideAngular(() => {\n            this._bindKeyEventUnsubscribe = this.renderer.listen(bindKeyEventElement, 'keydown', this.onKeydown.bind(this));\n        });\n        this._instanceSelectionModel();\n    }\n\n    writeValue(value: any[] | any): void {\n        if (value) {\n            if (this.multiple && !helpers.isArray(value)) {\n                throw new Error(`multiple selection ngModel must be array.`);\n            }\n            if (!this.multiple && helpers.isArray(value)) {\n                throw new Error(`single selection ngModel not be array.`);\n            }\n        }\n        const values = helpers.isArray(value) ? value : (value ? [value] : []);\n        this._modelValues = values;\n        if (this.options) {\n            this._setSelectionByValues(values);\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (this.thyBeforeKeydown) {\n            // stop key down event\n            const isContinue = this.thyBeforeKeydown(event);\n            if (!isContinue) {\n                return;\n            }\n        }\n        const keyCode = event.keyCode || event.which;\n        const manager = this._keyManager;\n        const previousFocusIndex = manager.activeItemIndex;\n\n        switch (keyCode) {\n            case keycodes.SPACE:\n            case keycodes.ENTER:\n                this._toggleFocusedOption(event);\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n                manager.onKeydown(event);\n        }\n        if ((keyCode === keycodes.UP_ARROW || keyCode === keycodes.DOWN_ARROW) && event.shiftKey &&\n            manager.activeItemIndex !== previousFocusIndex) {\n            this._toggleFocusedOption(event);\n        }\n    }\n\n    toggleOption(option: ThyListOptionComponent, event?: Event) {\n        if (option && !option.disabled) {\n            this.selectionModel.toggle(this._getOptionSelectionValue(option));\n            // Emit a change event because the focused option changed its state through user\n            // interaction.\n            this._emitModelValueChange();\n            this._emitChangeEvent(option, event);\n        }\n    }\n\n    setActiveOption(option: ThyListOptionComponent) {\n        this._keyManager.updateActiveItem(option); // .updateActiveItemIndex(this._getOptionIndex(option));\n    }\n\n    scrollIntoView(option: ThyListOptionComponent) {\n        const scrollContainerElement = dom.getHTMLElementBySelector(this.thyScrollContainer, this.elementRef);\n        ScrollToService.scrollToElement(option.element.nativeElement, scrollContainerElement);\n    }\n\n    isSelected(option: ThyListOptionComponent) {\n        return this.selectionModel.isSelected(this._getOptionSelectionValue(option));\n    }\n\n    clearActiveItem() {\n        if (this._keyManager.activeItem) {\n            this._keyManager.setActiveItem(-1);\n        }\n    }\n\n    determineClearActiveItem() {\n        if (!this._getActiveOption()) {\n            this.clearActiveItem();\n        }\n    }\n\n    /** Selects all of the options. */\n    selectAll() {\n        this._setAllOptionsSelected(true);\n    }\n\n    /** Deselects all of the options. */\n    deselectAll() {\n        this._setAllOptionsSelected(false);\n    }\n\n    ngAfterContentInit(): void {\n        this._initializeFocusKeyManager();\n        // if (this._tempValues) {\n        //     this._setSelectionByValues(this._tempValues);\n        //     this._tempValues = null;\n        // }\n    }\n\n    ngOnDestroy() {\n        this._selectionChangesUnsubscribe$.unsubscribe();\n        if (this._bindKeyEventUnsubscribe) {\n            this._bindKeyEventUnsubscribe();\n        }\n    }\n}\n"]}