{"version":3,"file":"dialog.config.js","sourceRoot":"","sources":["../../.tmp/dialog/dialog.config.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAoB,cAAc,EAAE,MAAM,eAAe,CAAC;AAsBjE,MAAM,CAAN,IAAY,cAMX;AAND,WAAY,cAAc;IACtB,2BAAS,CAAA;IACT,wCAAsB,CAAA;IACtB,kCAAgB,CAAA;IAChB,2BAAS,CAAA;IACT,2BAAS,CAAA;AACb,CAAC,EANW,cAAc,KAAd,cAAc,QAMzB;AAED;;GAEG;AACH;IAAA;QAYI,2CAA2C;QAC3C,SAAI,GAAmB,QAAQ,CAAC;QAEhC,yCAAyC;QACzC,eAAU,GAAuB,EAAE,CAAC,CAAC,sBAAsB;QAE3D,yCAAyC;QACzC,gBAAW,GAAI,IAAI,CAAC;QAEpB,qCAAqC;QACrC,kBAAa,GAAI,EAAE,CAAC,CAAC,yBAAyB;QAE9C,sFAAsF;QACtF,qBAAgB,GAAI,IAAI,CAAC;QAEzB,2BAA2B;QAC3B,UAAK,GAAI,EAAE,CAAC;QAEZ,4BAA4B;QAC5B,WAAM,GAAI,EAAE,CAAC;QAKb,kFAAkF;QAClF,cAAS,GAAqB,MAAM,CAAC;QAWrC,oDAAoD;QACpD,iBAAY,GAAkB,IAAI,CAAC;QAQnC,mDAAmD;QACnD,oBAAe,GAAmB,IAAI,CAAC;QAEvC,iDAAiD;QACjD,cAAS,GAAmB,IAAI,CAAC;QAEjC,2EAA2E;QAC3E,cAAS,GAAI,IAAI,CAAC;QAElB;;;WAGG;QACH,iBAAY,GAAI,IAAI,CAAC;QAKrB;;;;WAIG;QACH,sBAAiB,GAAI,IAAI,CAAC;IAC9B,CAAC;IAAD,sBAAC;AAAD,CAAC,AAjFD,IAiFC;;AAED,0EAA0E;AAC1E,MAAM,CAAC,IAAM,0BAA0B,GAAG,IAAI,cAAc,CAAkB,4BAA4B,CAAC,CAAC;AAE5G,MAAM,CAAC,IAAM,mCAAmC,GAAG;IAC/C,OAAO,EAAE,0BAA0B;IACnC,QAAQ,EAAE;QACN,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,IAAI;QACjB,aAAa,EAAE,EAAE;QACjB,UAAU,EAAE,EAAE;QACd,gBAAgB,EAAE,IAAI;QACtB,iBAAiB,EAAE,IAAI;QACvB,SAAS,EAAE,IAAI;QACf,YAAY,EAAE,IAAI;KACrB;CACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { ViewContainerRef, InjectionToken } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type ThyDialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n    /** Override for the dialog's top position. */\n    top?: string;\n\n    /** Override for the dialog's bottom position. */\n    bottom?: string;\n\n    /** Override for the dialog's left position. */\n    left?: string;\n\n    /** Override for the dialog's right position. */\n    right?: string;\n}\n\nexport enum ThyDialogSizes {\n    lg = 'lg',\n    supperLg = 'supper-lg',\n    maxLg = 'max-lg',\n    md = 'md',\n    sm = 'sm'\n}\n\n/**\n * Configuration for opening a modal dialog with the ThyDialog service.\n */\nexport class ThyDialogConfig<TData = any> {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef?: ViewContainerRef;\n\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** The ARIA role of the dialog element. */\n    role?: ThyDialogRole = 'dialog';\n\n    /** Custom class for the overlay pane. */\n    panelClass?: string | string[] = ''; // 'thy-dialog-panel';\n\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop? = true;\n\n    /** Custom class for the backdrop, */\n    backdropClass? = ''; // 'thy-dialog-backdrop';\n\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    backdropClosable? = true;\n\n    /** Width of the dialog. */\n    width? = '';\n\n    /** Height of the dialog. */\n    height? = '';\n\n    /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n\n    /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string = '20vh';\n\n    /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n    maxWidth?: number | string;\n\n    /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n\n    /** Position overrides. */\n    position?: DialogPosition;\n\n    /** Data being injected into the child component. */\n    initialState?: TData | null = null;\n\n    /** Dialog size md, lg, sm*/\n    size?: ThyDialogSizes;\n\n    /** Layout direction for the dialog's content. */\n    direction?: Direction;\n\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy?: string | null = null;\n\n    /** Aria label to assign to the dialog element */\n    ariaLabel?: string | null = null;\n\n    /** Whether the dialog should focus the first focusable element on open. */\n    autoFocus? = true;\n\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus? = true;\n\n    /** Scroll strategy to be used for the dialog. */\n    scrollStrategy?: ScrollStrategy;\n\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation? = true;\n}\n\n/** Injection token that can be used to specify default dialog options. */\nexport const THY_DIALOG_DEFAULT_OPTIONS = new InjectionToken<ThyDialogConfig>('thy-dialog-default-options');\n\nexport const THY_DIALOG_DEFAULT_OPTIONS_PROVIDER = {\n    provide: THY_DIALOG_DEFAULT_OPTIONS,\n    useValue: {\n        role: 'dialog',\n        hasBackdrop: true,\n        backdropClass: '',\n        panelClass: '',\n        backdropClosable: true,\n        closeOnNavigation: true,\n        autoFocus: true,\n        restoreFocus: true\n    }\n};\n"]}