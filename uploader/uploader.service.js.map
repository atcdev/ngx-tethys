{"version":3,"file":"uploader.service.js","sourceRoot":"","sources":["../../.tmp/uploader/uploader.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nexport enum ThyUploadStatus {\n    started = 'started',\n    uploading = 'uploading',\n    done = 'done'\n}\n\nexport interface ThyUploadResponse {\n    status: ThyUploadStatus;\n    uploadFile?: ThyUploadFile;\n}\n\nexport interface ThyUploadFile {\n    identifier?: string;\n    method: string;\n    url: string;\n    withCredentials?: Boolean;\n    nativeFile: File;\n    fileField?: string;\n    fileName?: string;\n    headers?: {\n        [key: string]: string\n    };\n    data?: {\n        [key: string]: string\n    };\n\n    responseStatus?: any;\n    response?: any;\n    responseHeaders?: any;\n\n    progress?: {\n        status: ThyUploadStatus,\n        percentage: number,\n        speed?: number;\n        speedHuman?: string;\n        startTime: number | null;\n        endTime?: number | null;\n        estimatedTime?: number | null;\n        estimatedTimeHuman?: string | null;\n    };\n}\n\n@Injectable()\nexport class ThyUploaderService {\n\n    constructor() {\n    }\n\n    _secondsToHuman(sec: number): string {\n        return new Date(sec * 1000).toISOString().substr(11, 8);\n    }\n\n    _humanizeBytes(bytes: number): string {\n        if (bytes === 0) {\n            return '0 Byte';\n        }\n\n        const k = 1024;\n        const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n        const i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    upload(uploadFile: ThyUploadFile): Observable<ThyUploadResponse> {\n        uploadFile.fileName = uploadFile.fileName || uploadFile.nativeFile.name;\n        return new Observable(observer => {\n            const xhr = new XMLHttpRequest();\n            const time: number = new Date().getTime();\n            let speed = 0;\n            let estimatedTime: number | null = null;\n\n            if (!uploadFile.progress) {\n                uploadFile.progress = {\n                    status: ThyUploadStatus.started,\n                    percentage: 0,\n                    startTime: time\n                };\n            }\n\n            xhr.upload.addEventListener('progress', (event: ProgressEvent) => {\n                if (event.lengthComputable) {\n                    let percentage = Math.round((event.loaded * 100) / event.total);\n                    if (percentage === 100) {\n                        percentage = 99;\n                    }\n                    const diff = new Date().getTime() - time;\n                    speed = Math.round(event.loaded / diff * 1000);\n                    const progressStartTime = (uploadFile.progress && uploadFile.progress.startTime) || new Date().getTime();\n                    estimatedTime = Math.ceil((event.total - event.loaded) / speed);\n\n                    uploadFile.progress.status = ThyUploadStatus.uploading;\n                    uploadFile.progress.percentage = percentage;\n                    uploadFile.progress.speed = speed;\n                    uploadFile.progress.speedHuman = `${this._humanizeBytes(speed)}/s`;\n                    uploadFile.progress.startTime = progressStartTime;\n                    uploadFile.progress.estimatedTime = estimatedTime;\n                    uploadFile.progress.estimatedTimeHuman = this._secondsToHuman(estimatedTime);\n\n                    observer.next({ status: ThyUploadStatus.uploading, uploadFile: uploadFile });\n                }\n            }, false);\n\n            xhr.upload.addEventListener('error', (e: Event) => {\n                observer.error(e);\n                observer.complete();\n            });\n\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === XMLHttpRequest.DONE) {\n                    const speedTime = (new Date().getTime() - uploadFile.progress.startTime) * 1000;\n                    const speedAverage = Math.round(uploadFile.nativeFile.size / speedTime);\n\n                    uploadFile.progress.status = ThyUploadStatus.done;\n                    uploadFile.progress.percentage = 100;\n                    uploadFile.progress.speed = speedAverage;\n                    uploadFile.progress.speedHuman = `${this._humanizeBytes(speed)}/s`;\n                    uploadFile.progress.estimatedTime = estimatedTime;\n                    uploadFile.progress.estimatedTimeHuman = this._secondsToHuman(estimatedTime || 0);\n\n                    uploadFile.responseStatus = xhr.status;\n\n                    try {\n                        uploadFile.response = JSON.parse(xhr.response);\n                    } catch (e) {\n                        uploadFile.response = xhr.response;\n                    }\n\n                    // file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n\n                    observer.next({ status: ThyUploadStatus.done, uploadFile: uploadFile });\n\n                    observer.complete();\n                }\n            };\n\n            xhr.open(uploadFile.method, uploadFile.url, true);\n            xhr.withCredentials = uploadFile.withCredentials ? true : false;\n\n            try {\n                const formData = new FormData();\n\n                Object.keys(uploadFile.data || {}).forEach(key => formData.append(key, uploadFile.data[key]));\n                Object.keys(uploadFile.headers || {}).forEach(key => xhr.setRequestHeader(key, uploadFile.headers[key]));\n\n                formData.append(uploadFile.fileField || 'file', uploadFile.nativeFile, uploadFile.fileName);\n\n                observer.next({ status: ThyUploadStatus.started, uploadFile: uploadFile });\n                xhr.send(formData);\n            } catch (error) {\n                observer.error(error);\n                observer.complete();\n            }\n\n            return () => {\n                xhr.abort();\n            };\n        });\n\n    }\n}\n"]}