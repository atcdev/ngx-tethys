{"version":3,"file":"pop-box-container.component.js","sourceRoot":"","sources":["../../.tmp/pop-box/pop-box-container.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component, OnInit, ElementRef,\n    HostBinding, Inject,\n    Renderer2, ViewEncapsulation, HostListener, NgZone, OnDestroy, DoCheck, AfterViewInit\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PopBoxRef } from './pop-box-ref.service';\nimport { PopBoxOptions } from './pop-box-options.class';\nimport { ThyPositioningService } from '../positioning/positioning.service';\n\n@Component({\n    selector: 'pop-box-container',\n    template: \"<div class=\\\"pop-box-container-mask\\\" *ngIf=\\\"showMask\\\" (click)=\\\"clickMask($event)\\\"></div> <div class=\\\"pop-box\\\" (click)=\\\"clickPopBox($event)\\\"> <div class=\\\"pop-box-content {{config.containerClass}}\\\"> <ng-content></ng-content> </div> </div> \",\n    encapsulation: ViewEncapsulation.None\n})\nexport class PopBoxContainerComponent implements OnInit, OnDestroy, DoCheck, AfterViewInit {\n\n    @HostBinding('style.z-index') _zIndex: number | string;\n\n    public popBoxRef: PopBoxRef;\n\n    public showMask = false;\n\n    private _originHeight: number;\n\n    _unsubscribe: () => void;\n\n    constructor(\n        protected elementRef: ElementRef,\n        private renderer: Renderer2,\n        public config: PopBoxOptions,\n        @Inject(DOCUMENT) private document: any,\n        private ngZone: NgZone,\n        private thyPositioningService: ThyPositioningService\n    ) {\n        this.showMask = this.config.showMask;\n    }\n\n    ngOnInit(): void {\n        this._zIndex = this.config.zIndex || '';\n        this.ngZone.runOutsideAngular(() => {\n            this._unsubscribe = this.renderer.listen(this.document, 'click', this.onDocumentClick.bind(this));\n        });\n    }\n\n    ngAfterViewInit() {\n        this._originHeight = (+this.elementRef.nativeElement.clientHeight);\n    }\n\n\n    hide(): void {\n        this.popBoxRef.hide();\n    }\n\n    clickPopBox(event: Event): void {\n        if (this.config.stopPropagation) {\n            event.stopPropagation();\n        }\n        if (this.config.insideAutoClose) {\n            this.hide();\n        }\n    }\n\n    clickMask(event: Event): void {\n        if (this.config.outsideAutoClose) {\n            this.hide();\n        } else {\n            return;\n            // this.closePopBox(event);\n        }\n    }\n\n    @HostListener('window:keydown.esc', ['$event'])\n    onEsc(event: any): void {\n        if (this.config.keyboardESCClose) {\n            event.preventDefault();\n            this.hide();\n        }\n    }\n\n    // @HostListener('document:click', ['$event'])\n    onDocumentClick(event: Event): void {\n        if (this.config.showMask) {\n            return;\n        }\n        // 是否点击了 pop box 内部区域\n        const isClickPopBoxInner = this.elementRef.nativeElement.contains(event.target);\n        let needClose = false;\n        if (this.config.outsideAutoClose) {\n            // 没有 target，说明是 直接传入的 position，点击外部元素直接关闭即可\n            if (!this.config.target && !isClickPopBoxInner) {\n                needClose = true;\n            } else if (this.config.target && !this.config.target.contains(event.target) && !isClickPopBoxInner) {\n                // 点击事件元素不是原来的触发弹出元素，并且不是 pob box 内部元素点击\n                needClose = true;\n            }\n        }\n        if (this.config.insideAutoClose && isClickPopBoxInner) {\n            needClose = true;\n        }\n\n        if (needClose) {\n            this.ngZone.run(() => {\n                this.hide();\n            });\n        }\n    }\n\n    ngDoCheck(): void {\n        const height = (+this.elementRef.nativeElement.clientHeight);\n        if (height !== this._originHeight) {\n            this._originHeight = height;\n            this.thyPositioningService.setPosition({\n                target: this.elementRef,\n                attach: this.config.target,\n                placement: this.config.placement,\n                offset: this.config.offset,\n                appendToBody: true,\n                position: this.config.position,\n                autoAdapt: true\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n            this._unsubscribe = null;\n        }\n    }\n}\n"]}