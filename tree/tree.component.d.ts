import { ElementRef, TemplateRef, OnInit, OnChanges, EventEmitter, NgZone, SimpleChanges } from '@angular/core';
import { ThyTreeNodeData, ThyTreeEmitEvent, ThyTreeNode } from './tree.class';
import { SortablejsOptions } from 'angular-sortablejs';
import { ThyTreeService } from './tree.service';
import { SelectionModel } from '@angular/cdk/collections';
import { ControlValueAccessor } from '@angular/forms';
import { UpdateHostClassService } from '../shared/update-host-class.service';
export declare class ThyTreeComponent implements ControlValueAccessor, OnInit, OnChanges {
    private ngZone;
    thyTreeService: ThyTreeService;
    private elementRef;
    private updateHostClassService;
    private _templateRef;
    private _emptyChildrenTemplateRef;
    private _draggable;
    private _draggableNode;
    _selectionModel: SelectionModel<ThyTreeNode>;
    treeNodesSortableOptions: SortablejsOptions;
    treeNodes: ThyTreeNode[];
    thyNodes: ThyTreeNodeData[];
    thyShowExpand: boolean;
    thyMultiple: boolean;
    thyDraggable: boolean | any;
    thyAsync: boolean;
    thyType: string;
    thyTitleTruncate: boolean;
    thyOnClick: EventEmitter<ThyTreeEmitEvent>;
    thyOnExpandChange: EventEmitter<ThyTreeEmitEvent>;
    thyOnDraggableChange: EventEmitter<ThyTreeEmitEvent>;
    templateRef: TemplateRef<any>;
    emptyChildrenTemplate: TemplateRef<any>;
    emptyChildrenTemplateRef: TemplateRef<any>;
    thyTreeClass: boolean;
    thyTreeDraggableClass: boolean;
    private _onTouched;
    private _onChange;
    constructor(ngZone: NgZone, thyTreeService: ThyTreeService, elementRef: ElementRef, updateHostClassService: UpdateHostClassService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    private _setTreeType;
    private _instanceSelectionModel;
    isSelected(node: ThyTreeNode): boolean;
    toggleTreeNode(node: ThyTreeNode): void;
    trackByFn(index: number, item: any): any;
    private _formatDraggableEvent;
    private _onDraggableStart;
    private _onDraggableUpdate;
    private _onDraggableAdd;
    writeValue(value: ThyTreeNodeData[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    selectTreeNode(node: ThyTreeNode): void;
    getRootNodes(): ThyTreeNode[];
    getSelectedNode(): ThyTreeNode;
    getSelectedNodes(): ThyTreeNode[];
    getExpandedNodes(): ThyTreeNode[];
    addTreeNode(node: ThyTreeNodeData, parent?: ThyTreeNode, index?: number): void;
    deleteTreeNode(node: ThyTreeNode): void;
}
