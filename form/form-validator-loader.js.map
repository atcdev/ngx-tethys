{"version":3,"file":"form-validator-loader.js","sourceRoot":"","sources":["../../.tmp/form/form-validator-loader.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAkB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC7E,OAAO,EAGH,oBAAoB,EACvB,MAAM,cAAc,CAAC;AAGtB,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAElC,MAAM,CAAC,IAAM,yBAAyB,GAAG,YAAY,CAAC;AAEtD,IAAM,aAAa,GAAG,YAAY,CAAC;AACnC,IAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAElD,IAAM,sBAAsB,GAAiC;IACzD,gBAAgB,EAAE,IAAI;IACtB,kBAAkB,EAAE,IAAI;IACxB,kBAAkB,EAAE,EAAE;CACzB,CAAC;AAEF,IAAM,wBAAwB,GAAG;IAC7B,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,yBAAyB;IACpC,SAAS,EAAE,yBAAyB;IACpC,cAAc,EAAE,eAAe;IAC/B,KAAK,EAAE,YAAY;IACnB,MAAM,EAAE,SAAS;IACjB,OAAO,EAAE,YAAY;IACrB,MAAM,EAAE,QAAQ;IAChB,GAAG,EAAE,YAAY;IACjB,GAAG,EAAE,iBAAiB;IACtB,GAAG,EAAE,iBAAiB;CACzB,CAAC;AAGF;IAaI,gCAGI,MAAoC;QAEpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,sBAAsB,EAAE,MAAM,CAAC,CAAC;IACpE,CAAC;IAhBO,6DAA4B,GAApC,UAAqC,GAAW;QAC5C,IACI,IAAI,CAAC,MAAM,CAAC,wBAAwB;YACpC,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,GAAG,CAAC,EAC3C;YACE,OAAO,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC;SACpD;aAAM;YACH,OAAO,wBAAwB,CAAC,GAAG,CAAC,CAAC;SACxC;IACL,CAAC;IASD,sBAAI,sDAAkB;aAAtB;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;QAC1C,CAAC;;;OAAA;IAED,gDAAe,GAAf,UAAgB,IAAY,EAAE,GAAW;QACrC,IACI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAC7B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EACpC;YACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SAC7C;aAAM;YACH,OAAO,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC;SACjD;IACL,CAAC;IAED,iDAAgB,GAAhB,UAAiB,IAAY,EAAE,gBAAkC;QAC7D,IAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAM,eAAe,IAAI,gBAAgB,EAAE;YAC5C,IAAI,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE;gBAClD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;aAC9D;SACJ;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,iDAAgB,GAAhB,UAAiB,OAAY,EAAE,aAAuB;QAClD,IAAI,OAAO,IAAI,OAAO,CAAC,aAAa,EAAE;YAClC,IAAM,YAAY,GAAG,QAAQ,CAAC,sBAAsB,EAAE,CAAC;YACvD,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC9C,IAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC9B,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,sBAAsB,CAAC,CAAC;YACtD,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAClC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SAC9C;IACL,CAAC;IAED,mDAAkB,GAAlB,UAAmB,OAAoB;QACnC,IAAI,OAAO,IAAI,OAAO,CAAC,aAAa,EAAE;YAClC,IAAM,eAAe,GAAG,OAAO,CAAC,aAAa,CAAC,aAAa,CACvD,mBAAmB,CACtB,CAAC;YACF,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;SACtD;IACL,CAAC;IAED,4CAAW,GAAX,UAAY,OAAoB;QAC5B,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACxC,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE;YACnD,IAAI,CAAC,MAAM,CAAC,gBAAwB,CAAC,OAAO,CAAC,CAAC;SAClD;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YACrC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;SACpC;aAAM;YACH,cAAc;SACjB;IACL,CAAC;IAED,0CAAS,GAAT,UAAU,OAAoB,EAAE,aAAuB;QACnD,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACrC,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;YACjD,IAAI,CAAC,MAAM,CAAC,gBAAwB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;SACjE;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YACrC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;SACjD;aAAM;YACH,cAAc;SACjB;IACL,CAAC;IAED,sDAAqB,GAArB,UAAsB,QAAmC;QACrD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED,4DAA2B,GAA3B,UAA4B,kBAAsC;QAC9D,IAAI,CAAC,MAAM,CAAC,wBAAwB,GAAG,kBAAkB,CAAC;IAC9D,CAAC;IA/FQ,sBAAsB;QADlC,UAAU,EAAE;QAeJ,WAAA,QAAQ,EAAE,CAAA;QACV,WAAA,MAAM,CAAC,oBAAoB,CAAC,CAAA;;OAfxB,sBAAsB,CAgGlC;IAAD,6BAAC;CAAA,AAhGD,IAgGC;SAhGY,sBAAsB","sourcesContent":["import { InjectionToken, Inject, Injectable, Optional } from '@angular/core';\nimport {\n    ThyFormValidatorGlobalConfig,\n    ThyFormValidationMessages,\n    THY_VALIDATOR_CONFIG\n} from './form.class';\nimport { Dictionary } from '../typings';\nimport { ValidationErrors } from '@angular/forms';\nimport { helpers } from '../util';\n\nexport const ERROR_VALUE_REPLACE_REGEX = /\\{(.+?)\\}/g;\n\nconst INVALID_CLASS = 'is-invalid';\nconst INVALID_FEEDBACK_CLASS = 'invalid-feedback';\n\nconst defaultValidatorConfig: ThyFormValidatorGlobalConfig = {\n    showElementError: true,\n    removeElementError: true,\n    validationMessages: {}\n};\n\nconst globalValidationMessages = {\n    required: '该选项不能为空',\n    maxlength: '该选项输入值长度不能大于{maxlength}',\n    minlength: '该选项输入值长度不能小于{minlength}',\n    thyUniqueCheck: '输入值已经存在，请重新输入',\n    email: '输入邮件的格式不正确',\n    repeat: '两次输入不一致',\n    pattern: '该选项输入格式不正确',\n    number: '必须输入数字',\n    url: '输入URL格式不正确',\n    max: '该选项输入值不能大于{max}',\n    min: '该选项输入值不能小于{min}'\n};\n\n@Injectable()\nexport class ThyFormValidatorLoader {\n    private config: ThyFormValidatorGlobalConfig;\n\n    private _getDefaultValidationMessage(key: string) {\n        if (\n            this.config.globalValidationMessages &&\n            this.config.globalValidationMessages[key]\n        ) {\n            return this.config.globalValidationMessages[key];\n        } else {\n            return globalValidationMessages[key];\n        }\n    }\n    constructor(\n        @Optional()\n        @Inject(THY_VALIDATOR_CONFIG)\n        config: ThyFormValidatorGlobalConfig\n    ) {\n        this.config = Object.assign({}, defaultValidatorConfig, config);\n    }\n\n    get validationMessages() {\n        return this.config.validationMessages;\n    }\n\n    getErrorMessage(name: string, key: string) {\n        if (\n            this.validationMessages[name] &&\n            this.validationMessages[name][key]\n        ) {\n            return this.validationMessages[name][key];\n        } else {\n            return this._getDefaultValidationMessage(key);\n        }\n    }\n\n    getErrorMessages(name: string, validationErrors: ValidationErrors) {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(this.getErrorMessage(name, validationError));\n            }\n        }\n        return messages;\n    }\n\n    defaultShowError(element: any, errorMessages: string[]) {\n        if (element && element.parentElement) {\n            const documentFrag = document.createDocumentFragment();\n            const divNode = document.createElement('DIV');\n            const textNode = document.createTextNode(errorMessages[0]);\n            divNode.appendChild(textNode);\n            divNode.setAttribute('class', INVALID_FEEDBACK_CLASS);\n            documentFrag.appendChild(divNode);\n            element.parentElement.append(documentFrag);\n        }\n    }\n\n    defaultRemoveError(element: HTMLElement) {\n        if (element && element.parentElement) {\n            const invalidFeedback = element.parentElement.querySelector(\n                '.invalid-feedback'\n            );\n            element.parentElement.removeChild(invalidFeedback);\n        }\n    }\n\n    removeError(element: HTMLElement) {\n        element.classList.remove(INVALID_CLASS);\n        if (helpers.isFunction(this.config.removeElementError)) {\n            (this.config.showElementError as any)(element);\n        } else if (this.config.showElementError) {\n            this.defaultRemoveError(element);\n        } else {\n            // do nothings\n        }\n    }\n\n    showError(element: HTMLElement, errorMessages: string[]) {\n        element.classList.add(INVALID_CLASS);\n        if (helpers.isFunction(this.config.showElementError)) {\n            (this.config.showElementError as any)(element, errorMessages);\n        } else if (this.config.showElementError) {\n            this.defaultShowError(element, errorMessages);\n        } else {\n            // do nothings\n        }\n    }\n\n    addValidationMessages(messages: ThyFormValidationMessages) {\n        Object.assign(this.config.validationMessages, messages);\n    }\n\n    setGlobalValidationMessages(validationMessages: Dictionary<string>) {\n        this.config.globalValidationMessages = validationMessages;\n    }\n}\n"]}