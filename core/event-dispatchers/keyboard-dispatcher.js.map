{"version":3,"file":"keyboard-dispatcher.js","sourceRoot":"","sources":["../../../.tmp/core/event-dispatchers/keyboard-dispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EACH,MAAM,EACN,UAAU,EACV,MAAM,EACT,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,kBAAkB,EAAE,MAAM,oBAAoB,CAAC;;;AAExD,IAAM,oBAAoB,GAAG,GAAG,CAAC;AAKjC;IAA2C,yCAAkB;IAEzD,+BACsB,QAAa,EAC/B,MAAc;eAEd,kBAAM,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC;IACtC,CAAC;IAED,uCAAO,GAAP,UAAQ,aAA4C;QAA5C,8BAAA,EAAA,oCAA4C;QAChD,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACzC,CAAC;;IAXQ,qBAAqB;QAHjC,UAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;QAIO,WAAA,MAAM,CAAC,QAAQ,CAAC,CAAA;iDACT,MAAM;OAJT,qBAAqB,CAYjC;gCAlCD;CAkCC,AAZD,CAA2C,kBAAkB,GAY5D;SAZY,qBAAqB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    NgZone\n} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ThyEventDispatcher } from './event-dispatcher';\n\nconst DEFAULT_KEYDOWN_TIME = 100;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyKeyboardDispatcher extends ThyEventDispatcher {\n\n    constructor(\n        @Inject(DOCUMENT) document: any,\n        ngZone: NgZone\n    ) {\n        super(document, ngZone, 'keydown');\n    }\n\n    keydown(auditTimeInMs: number = DEFAULT_KEYDOWN_TIME): Observable<Event> {\n        return this.subscribe(auditTimeInMs);\n    }\n}\n\n\n// @Injectable({ providedIn: 'root' })\n// export class ThyKeyboardDispatcher implements OnDestroy {\n//     /** Currently attached keydown refs in the order they were attached. */\n//     _attachedKeydownSubjects: Subject<KeyboardEvent>[] = [];\n\n//     private _document: Document;\n\n//     private _isAttached: boolean;\n\n//     /** Keyboard event listener that will be attached to the body. */\n//     private _keydownListener = (event: KeyboardEvent) => {\n//         const keydownRefs = this._attachedKeydownSubjects;\n\n//         for (let i = keydownRefs.length - 1; i > -1; i--) {\n//             keydownRefs[i].next(event);\n//             break;\n//         }\n//     }\n\n//     /** Detaches the global keyboard event listener. */\n//     private _detach() {\n//         if (this._isAttached) {\n//             this._document.body.removeEventListener(\n//                 'keydown',\n//                 this._keydownListener,\n//                 true\n//             );\n//             this._isAttached = false;\n//         }\n//     }\n\n//     constructor(@Inject(DOCUMENT) document: any) {\n//         this._document = document;\n//     }\n\n//     ngOnDestroy() {\n//         this._detach();\n//     }\n\n//     /** Add a new overlay to the list of attached overlay refs. */\n//     add(keydownSubject: Subject<KeyboardEvent>): void {\n//         // Ensure that we don't get the same overlay multiple times.\n//         this.remove(keydownSubject);\n\n//         // Lazily start dispatcher once first overlay is added\n//         if (!this._isAttached) {\n//             this._document.body.addEventListener(\n//                 'keydown',\n//                 this._keydownListener,\n//                 true\n//             );\n//             this._isAttached = true;\n//         }\n\n//         this._attachedKeydownSubjects.push(keydownSubject);\n//     }\n\n//     /** Remove an keydown ref from the list of attached keydown refs. */\n//     remove(keydownRef: Subject<KeyboardEvent>): void {\n//         const index = this._attachedKeydownSubjects.indexOf(keydownRef);\n\n//         if (index > -1) {\n//             this._attachedKeydownSubjects.splice(index, 1);\n//         }\n\n//         // Remove the global listener once there are no more refs.\n//         if (this._attachedKeydownSubjects.length === 0) {\n//             this._detach();\n//         }\n//     }\n// }\n"]}