{"version":3,"file":"dialog-ref.js","sourceRoot":"","sources":["../../.tmp/dialog/dialog-ref.ts"],"names":[],"mappings":"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","sourcesContent":["import { ESCAPE } from '@angular/cdk/keycodes';\nimport { GlobalPositionStrategy, OverlayRef } from '@angular/cdk/overlay';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { DialogPosition } from './dialog.config';\nimport { ThyDialogContainerComponent } from './dialog-container.component';\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\nexport abstract class ThyDialogRef<T, TResult = any> {\n    componentInstance: T;\n    id: string;\n    backdropClosable: boolean;\n    abstract close(dialogResult?: TResult): void;\n    abstract afterOpened(): Observable<void>;\n    abstract afterClosed(): Observable<TResult | undefined>;\n    abstract beforeClosed(): Observable<TResult | undefined>;\n    abstract keydownEvents(): Observable<KeyboardEvent>;\n    abstract backdropClick(): Observable<MouseEvent>;\n    abstract updatePosition(position?: DialogPosition): this;\n}\n\nexport class ThyDialogRefInternal<T, TResult = any> implements ThyDialogRef<T, TResult> {\n    /** The instance of component opened into the dialog. */\n    componentInstance: T;\n\n    /** Whether the user is allowed to close the dialog. */\n    backdropClosable: boolean | undefined = this.containerInstance.config.backdropClosable;\n\n    /** Subject for notifying the user that the dialog has finished opening. */\n    private readonly _afterOpened = new Subject<void>();\n\n    /** Subject for notifying the user that the dialog has finished closing. */\n    private readonly _afterClosed = new Subject<TResult | undefined>();\n\n    /** Subject for notifying the user that the dialog has started closing. */\n    private readonly _beforeClosed = new Subject<TResult | undefined>();\n\n    /** Result to be passed to afterClosed. */\n    private _result: TResult | undefined;\n\n    /** Fetches the position strategy object from the overlay ref. */\n    private _getPositionStrategy(): GlobalPositionStrategy {\n        return this.overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n    }\n\n    constructor(\n        private overlayRef: OverlayRef,\n        public containerInstance: ThyDialogContainerComponent,\n        readonly id: string = `thy-dialog-${uniqueId++}`\n    ) {\n        // Pass the id along to the container.\n        containerInstance.id = id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged\n            .pipe(\n                filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n                take(1)\n            )\n            .subscribe(() => {\n                this._afterOpened.next();\n                this._afterOpened.complete();\n            });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged\n            .pipe(\n                filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n                take(1)\n            )\n            .subscribe(() => this.overlayRef.dispose());\n\n        overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this.overlayRef.dispose();\n        });\n\n        overlayRef\n            .keydownEvents()\n            .pipe(filter(event => event.keyCode === ESCAPE && this.backdropClosable))\n            .subscribe(() => this.close());\n    }\n\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult?: TResult): void {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this.containerInstance.animationStateChanged\n            .pipe(\n                filter(event => event.phaseName === 'start'),\n                take(1)\n            )\n            .subscribe(() => {\n                this._beforeClosed.next(dialogResult);\n                this._beforeClosed.complete();\n                this.overlayRef.detachBackdrop();\n            });\n        this.containerInstance.startExitAnimation();\n    }\n\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened(): Observable<void> {\n        return this._afterOpened.asObservable();\n    }\n\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed(): Observable<TResult | undefined> {\n        return this._afterClosed.asObservable();\n    }\n\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed(): Observable<TResult | undefined> {\n        return this._beforeClosed.asObservable();\n    }\n\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent> {\n        return this.overlayRef.backdropClick();\n    }\n\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent> {\n        return this.overlayRef.keydownEvents();\n    }\n\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position?: DialogPosition): this {\n        const strategy = this._getPositionStrategy();\n\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        } else {\n            strategy.centerHorizontally();\n        }\n\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        } else {\n            strategy.centerVertically();\n        }\n\n        this.overlayRef.updatePosition();\n\n        return this;\n    }\n\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSizeAndPosition(width: string = '', height: string = '', position?: DialogPosition): this {\n        this._getPositionStrategy()\n            .width(width)\n            .height(height);\n        this.updatePosition(position);\n        return this;\n    }\n}\n"]}