{"version":3,"file":"entity-store.js","sourceRoot":"","sources":["../../.tmp/store/entity-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Store } from './store';\nimport { Id, PaginationInfo } from './types';\nimport { helpers } from '../util';\nimport { Observable } from 'rxjs';\n\nexport interface EntityStoreOptions {\n    idKey: string;\n}\n\nexport interface EntityAddOptions {\n    prepend?: boolean;\n    // 如果是最后追加，自动跳转到最后一页\n    autoGotoLastPage?: boolean;\n}\n\nexport interface EntityState<TEntity> {\n    pageIndex: number;\n    pagination: PaginationInfo;\n    entities: TEntity[];\n    [key: string]: any;\n}\n\nexport class EntityStore<\n    TState extends EntityState<TEntity>,\n    TEntity\n> extends Store<TState> {\n    protected options: EntityStoreOptions;\n\n    private resetPagination(pagination: PaginationInfo, count: number) {\n        pagination.count = count;\n        // 向上取整 21 / 20 = 1.05 = 2 pageCount is 2\n        const pageCount = Math.ceil(pagination.count / pagination.pageSize);\n        pagination.pageCount = pageCount;\n    }\n\n    private increasePagination(amount: number) {\n        const pagination = this.snapshot.pagination;\n        this.resetPagination(pagination, pagination.count + amount);\n    }\n\n    private decreasePagination(amount: number) {\n        const pagination = this.snapshot.pagination;\n        if (pagination) {\n            this.resetPagination(pagination, pagination.count - amount);\n        }\n    }\n\n    get entities() {\n        return this.snapshot.entities;\n    }\n\n    get entities$(): Observable<TEntity[]> {\n        return this.select((state: TState) => {\n            return state.entities;\n        });\n    }\n\n    constructor(\n        initialState = {\n            pageIndex: 1,\n            entities: [] as TEntity[]\n        },\n        options: EntityStoreOptions = { idKey: '_id' }\n    ) {\n        super(initialState);\n        this.options = options;\n    }\n\n    /**\n     *\n     * Replace current collection with provided collection\n     *\n     * @example\n     * this.store.initialize([Entity, Entity]);\n     *\n     */\n    initialize(entities: TEntity[], pagination: PaginationInfo) {\n        const state = this.snapshot;\n        state.entities = entities || [];\n        state.pagination = pagination;\n        this.next(state);\n    }\n\n    /**\n     * Add an entity or entities to the store.\n     *\n     * @example\n     * this.store.add(Entity);\n     * this.store.add([Entity, Entity]);\n     * this.store.add(Entity, { prepend: true });\n     */\n    add(entity: TEntity | TEntity[], addOptions?: EntityAddOptions) {\n        const addEntities = helpers.coerceArray(entity);\n        if (addEntities.length === 0) {\n            return;\n        }\n        const state = this.snapshot;\n        if (addOptions && addOptions.prepend) {\n            state.entities = [...addEntities, ...state.entities];\n        } else {\n            state.entities = [...state.entities, ...addEntities];\n        }\n        if (state.pagination) {\n            this.increasePagination(addEntities.length);\n            if (\n                addOptions &&\n                !addOptions.prepend &&\n                addOptions.autoGotoLastPage\n            ) {\n                state.pageIndex = state.pagination.pageIndex =\n                    state.pagination.pageCount;\n            }\n        }\n        this.next(state);\n    }\n\n    /**\n     *\n     * Update an entity or entities in the store.\n     *\n     * @example\n     * this.store.update(3, {\n     *   name: 'New Name'\n     * });\n     *\n     *  this.store.update(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  });\n     *\n     * this.store.update([1,2,3], {\n     *   name: 'New Name'\n     * });\n     */\n    update(\n        id: Id | Id[] | null,\n        newStateFn: ((entity: Readonly<TEntity>) => Partial<TEntity>)\n    ): void;\n    update(id: Id | Id[] | null, newState?: Partial<TEntity>): void;\n    update(\n        idsOrFn:\n            | Id\n            | Id[]\n            | null\n            | Partial<TState>\n            | ((state: Readonly<TState>) => Partial<TState>)\n            | ((entity: Readonly<TEntity>) => boolean),\n        newStateOrFn?:\n            | ((entity: Readonly<TEntity>) => Partial<TEntity>)\n            | Partial<TEntity>\n    ): void {\n        const ids = helpers.coerceArray(idsOrFn);\n\n        const state = this.snapshot;\n        for (let i = 0; i < state.entities.length; i++) {\n            const oldEntity = state.entities[i];\n            if (ids.indexOf(oldEntity[this.options.idKey]) > -1) {\n                const newState = helpers.isFunction(newStateOrFn)\n                    ? (newStateOrFn as any)(oldEntity)\n                    : newStateOrFn;\n                state.entities[i] = { ...(oldEntity as any), ...newState };\n            }\n        }\n    }\n\n    /**\n     *\n     * Remove one or more entities from the store:\n     *\n     * @example\n     * this.store.remove(5);\n     * this.store.remove([1,2,3]);\n     * this.store.remove(entity => entity.id === 1);\n     */\n    remove(id: Id | Id[]): void;\n    remove(predicate: (entity: Readonly<TEntity>) => boolean): void;\n    remove(\n        idsOrFn?: Id | Id[] | ((entity: Readonly<TEntity>) => boolean)\n    ): void {\n        const state = this.snapshot;\n        const originalLength = state.entities.length;\n        if (helpers.isFunction(idsOrFn)) {\n            state.entities = state.entities.filter(entity => {\n                return !(idsOrFn as any)(entity);\n            });\n        } else {\n            const ids = helpers.coerceArray(idsOrFn);\n            state.entities = state.entities.filter(entity => {\n                return ids.indexOf(entity[this.options.idKey]) === -1;\n            });\n        }\n        this.decreasePagination(originalLength - state.entities.length);\n        this.next(state);\n    }\n\n    trackBy(_index: number, entity: TEntity) {\n        return entity[this.options.idKey];\n    }\n\n    clear() {\n        const state = this.snapshot;\n        state.pageIndex = 1;\n        state.entities = [];\n        state.pagination = null;\n    }\n}\n"]}