{"version":3,"file":"transfer-list.component.js","sourceRoot":"","sources":["../../.tmp/transfer/transfer-list.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component, Input, Output, ElementRef,\n    ViewEncapsulation,\n    HostBinding,\n    EventEmitter,\n    TemplateRef,\n    IterableDiffer,\n    IterableDiffers,\n    OnInit,\n    OnDestroy,\n    DoCheck\n} from '@angular/core';\nimport { ThyTransferModel, ThyTransferSelectEvent, ThyTransferItem, ThyTransferDragEvent } from './transfer.interface';\nimport { ThyTransferComponent } from './transfer.component';\nimport { SortablejsOptions } from 'angular-sortablejs';\n\n@Component({\n    selector: 'thy-transfer-list',\n    template: \"<div class=\\\"thy-transfer-list-header\\\"> <span class=\\\"thy-transfer-list-header-title\\\">{{title}}</span> </div> <div class=\\\"thy-transfer-list-body\\\"> <ul class=\\\"thy-transfer-list-content\\\" [class.thy-transfer-drag]=\\\"!draggableOptions.disabled\\\" [sortablejs]=\\\"items\\\" [sortablejsOptions]=\\\"draggableOptions\\\"> <ng-container *ngFor=\\\"let item of items;\\\"> <li class=\\\"thy-transfer-list-content-item\\\" [ngClass]=\\\"{'active' : item.checked}\\\" (click)=\\\"onSelect(item)\\\"> <ng-template *ngIf=\\\"template\\\" [ngTemplateOutlet]=\\\"template\\\" [ngTemplateOutletContext]=\\\"{ $implicit: item }\\\"></ng-template> <ng-container *ngIf=\\\"!template\\\"> <ng-container *ngIf=\\\"!draggableOptions.disabled\\\"> <i class=\\\"thy-transfer-drag-icon wtf wtf-move\\\"></i> </ng-container> {{item.title}} </ng-container> </li> </ng-container> </ul> </div>\",\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTransferListComponent implements OnInit, DoCheck {\n\n    public draggableOptions: SortablejsOptions = {\n        disabled: false,\n        onStart: this.onDragStart.bind(this),\n        onUpdate: this.onDragUpdate.bind(this)\n    };\n\n    private _dragModel: ThyTransferItem;\n\n    private _diff: IterableDiffer<ThyTransferItem>;\n\n    @Input() title: string;\n\n    @Input() items: ThyTransferItem[];\n\n    @Input()\n    set draggable(value: boolean) {\n        this.draggableOptions.disabled = !value;\n    }\n\n    @Input() template: TemplateRef<any>;\n\n    @Output() draggableUpdate: EventEmitter<ThyTransferDragEvent> = new EventEmitter<ThyTransferDragEvent>();\n\n    @Output() select: EventEmitter<ThyTransferSelectEvent> = new EventEmitter<ThyTransferSelectEvent>();\n\n    @HostBinding('class') hostClass = 'thy-transfer-list';\n\n    constructor(\n        private root: ThyTransferComponent,\n        private differs: IterableDiffers\n    ) {\n\n    }\n\n    ngOnInit() {\n        this._diff = this.differs.find(this.items).create();\n    }\n\n    ngDoCheck() {\n        const changes = this._diff.diff(this.items);\n        if (changes) {\n            // 数据发生变化时，更改order值\n            changes.forEachAddedItem((record) => {\n                record.item.order = record.currentIndex;\n            });\n            changes.forEachRemovedItem(() => {\n                this.items.forEach((item, index) => {\n                    item.order = index;\n                });\n            });\n            changes.forEachMovedItem(() => {\n                this.items.forEach((item, index) => {\n                    item.order = index;\n                });\n            });\n        }\n    }\n\n    onSelect(item: any) {\n        const event: ThyTransferSelectEvent = { item: item };\n        this.select.emit(event);\n    }\n\n    onDragStart(event: any) {\n        this._dragModel = this.items[event.oldIndex];\n    }\n\n    onDragUpdate(event: any) {\n        const dragEvent: ThyTransferDragEvent = {\n            model: this._dragModel,\n            models: this.items,\n            oldIndex: event.oldIndex,\n            newIndex: event.newIndex,\n        };\n        this.draggableUpdate.emit(dragEvent);\n    }\n}\n"]}