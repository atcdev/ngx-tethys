{"version":3,"file":"update-host-class.service.js","sourceRoot":"","sources":["../../.tmp/shared/update-host-class.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAItD;IAMI,gCAAoB,QAAmB;QAAnB,aAAQ,GAAR,QAAQ,CAAW;QAJ/B,gBAAW,GAAa,EAAE,CAAC;IAMnC,CAAC;IAED,kDAAiB,GAAjB,UAAkB,aAA0B;QACxC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC;IACtC,CAAC;IAED,4CAAW,GAAX,UAAY,UAAoB;QAAhC,iBAkBC;QAjBG,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,SAAS;gBAC/B,IAAI,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBACnC,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;iBAC/B;YACL,CAAC,CAAC,CAAC;SACN;QACD,IAAM,UAAU,GAAa,EAAE,CAAC;QAChC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS;YACzB,IAAI,SAAS,EAAE;gBACX,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC3B,IAAI,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBACzC,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;iBAC5B;aACJ;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,iDAAgB,GAAhB,UAAiB,QAA6B;QAC1C,IAAM,UAAU,GAAG,EAAE,CAAC;QACtB,KAAK,IAAM,GAAG,IAAI,QAAQ,EAAE;YACxB,IAAI,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC/C,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACxB;SACJ;QACD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IAED,yCAAQ,GAAR,UAAS,SAAiB;QACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IACzD,CAAC;IAED,4CAAW,GAAX,UAAY,SAAiB;QACzB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC5D,CAAC;IAlDQ,sBAAsB;QADlC,UAAU,EAAE;yCAOqB,SAAS;OAN9B,sBAAsB,CAmDlC;IAAD,6BAAC;CAAA,AAnDD,IAmDC;SAnDY,sBAAsB","sourcesContent":["import { Injectable, Renderer2 } from '@angular/core';\nimport { Dictionary } from '../typings';\n\n@Injectable()\nexport class UpdateHostClassService {\n\n    private _classNames: string[] = [];\n\n    private _hostElement: HTMLElement;\n\n    constructor(private renderer: Renderer2) {\n\n    }\n\n    initializeElement(nativeElement: HTMLElement) {\n        this._hostElement = nativeElement;\n    }\n\n    updateClass(classNames: string[]) {\n        if (this._classNames) {\n            this._classNames.forEach((className) => {\n                if (classNames.indexOf(className) < 0) {\n                    this.removeClass(className);\n                }\n            });\n        }\n        const newClasses: string[] = [];\n        classNames.forEach((className) => {\n            if (className) {\n                newClasses.push(className);\n                if (this._classNames.indexOf(className) < 0) {\n                    this.addClass(className);\n                }\n            }\n        });\n        this._classNames = newClasses;\n    }\n\n    updateClassByMap(classMap: Dictionary<boolean>) {\n        const newClasses = [];\n        for (const key in classMap) {\n            if (classMap.hasOwnProperty(key) && classMap[key]) {\n                newClasses.push(key);\n            }\n        }\n        this.updateClass(newClasses);\n    }\n\n    addClass(className: string) {\n        this.renderer.addClass(this._hostElement, className);\n    }\n\n    removeClass(className: string) {\n        this.renderer.removeClass(this._hostElement, className);\n    }\n}\n"]}