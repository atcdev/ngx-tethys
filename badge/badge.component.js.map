{"version":3,"file":"badge.component.js","sourceRoot":"","sources":["../../.tmp/badge/badge.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, HostBinding, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { inputValueToBoolean } from '../util/helpers';\n\nconst BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];\nconst BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];\nconst BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];\n\n@Component({\n    selector: 'thy-badge,[thyBadge]',\n    template: \"<ng-container> <span *ngIf=\\\"st.isShowBadge\\\" class=\\\"thy-badge {{badgeClassName}}\\\">{{displayContent}}</span> </ng-container> <ng-content></ng-content>\",\n})\n\nexport class ThyBadgeComponent implements OnInit {\n\n    displayContent = '';\n\n    badgeClassName = '';\n\n    private nativeElement: any;\n\n    private _initialized = false;\n\n    private badgeClassNameMap = {\n        'thy-badge-count': true,\n        'thy-badge-dot': false,\n        'thy-badge-hollow': false,\n        'thy-badge-lg': false,\n        'thy-badge-sm': false,\n        'thy-badge-danger': true,\n        'thy-badge-primary': false,\n        'thy-badge-warning': false,\n        'thy-badge-secondary': false,\n        'thy-badge-sup': true,\n        'thy-badge-multiple-words': false,\n    };\n\n    st:\n        {\n            value: number | string | any,\n            isValueOfString: boolean,\n            isSetValue: boolean,\n            isValueKeepShow: boolean,\n            max: {\n                is: boolean,\n                value: number\n            },\n            isElement: boolean,\n            isSup: boolean,\n            isShowBadge: boolean,\n        } = {\n            value: '',\n            isValueOfString: false,\n            isSetValue: false,\n            isValueKeepShow: false,\n            max: {\n                is: false,\n                value: null\n            },\n            isElement: false,\n            isSup: false,\n            isShowBadge: true,\n        };\n\n    constructor(\n        private elementRef: ElementRef,\n    ) {\n        this.nativeElement = this.elementRef.nativeElement;\n        this.st.isElement = this.nativeElement.localName === 'thy-badge';\n    }\n\n    @HostBinding('class.thy-badge-container') containerClassName = true;\n\n    @Input()\n    set thyType(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n        switch (value) {\n            case 'danger': this.badgeClassNameMap['thy-badge-danger'] = true; break;\n            case 'primary': this.badgeClassNameMap['thy-badge-primary'] = true; break;\n            case 'warning': this.badgeClassNameMap['thy-badge-warning'] = true; break;\n            case 'secondary': this.badgeClassNameMap['thy-badge-secondary'] = true; break;\n            default: this.badgeClassNameMap['thy-badge-danger'] = true; break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyCount(value: number) {\n        this.st.value = value;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyContext(value: string) {\n        this.st.value = value;\n        this.st.isValueOfString = true;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyMaxCount(value: number) {\n        this.st.max.is = true;\n        this.st.max.value = value;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thySize(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexSize);\n        switch (value) {\n            case 'lg': this.badgeClassNameMap['thy-badge-lg'] = true; break;\n            case 'sm': this.badgeClassNameMap['thy-badge-sm'] = true; break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsDot(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-dot'] = inputValueToBoolean(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsHollow(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-hollow'] = inputValueToBoolean(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyKeepShow(value: boolean) {\n        this.st.isValueKeepShow = inputValueToBoolean(value);\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n        }\n    }\n\n    ngOnInit() {\n        this.st.isSup = this.nativeElement.childNodes.length > 1;\n        this.combineBadgeClassName();\n        if (this.st.isSetValue) {\n            this.combineBadgeDisplayContent();\n        }\n        this._initialized = true;\n    }\n\n    private combineBadgeClassName() {\n        this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;\n        this.explorationValueLength();\n\n        const _badgeClassNames = [];\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (this.badgeClassNameMap[key]) {\n                    _badgeClassNames.push(key);\n                }\n            }\n        }\n        this.badgeClassName = _badgeClassNames.join(' ');\n    }\n\n    private combineBadgeDisplayContent() {\n        this.displayContent = this.st.value;\n        if (this.st.value && this.st.max.is && (this.st.value > this.st.max.value)) {\n            this.displayContent = `${this.st.max.value}+`;\n        }\n\n        if (!this.st.value && !this.st.isValueKeepShow) {\n            this.st.isShowBadge = false;\n        } else {\n            this.st.isShowBadge = true;\n        }\n    }\n\n    private explorationValueLength() {\n        if (this.st.value && (this.st.value.toString().length > 1) && this.st.isSup) {\n            this.badgeClassNameMap['thy-badge-multiple-words'] = true;\n        }\n    }\n\n    private resetBadgeClassNameMap(mutexArray: any) {\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (mutexArray.includes(key)) {\n                    this.badgeClassNameMap[key] = false;\n                }\n            }\n        }\n    }\n\n\n}\n"]}