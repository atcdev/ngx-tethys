{"version":3,"file":"immutable.js","sourceRoot":"","sources":["../../.tmp/util/immutable.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAWpD;IAKI,kBAAY,QAAmB,EAAE,OAAyB;QAJlD,UAAK,GAAG,KAAK,CAAC;QAKlB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE;YAC1B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;SAC9B;IACL,CAAC;IAED;;;;;;;OAOG;IACH,sBAAG,GAAH,UAAI,MAA2B,EAAE,UAA6B;QAC1D,IAAM,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,OAAO;SACV;QACD,IAAI,UAAU,IAAI,UAAU,CAAC,OAAO,EAAE;YAClC,IAAI,CAAC,QAAQ,GAAO,WAAW,QAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;SACtD;aAAM;YACH,IAAI,CAAC,QAAQ,GAAO,IAAI,CAAC,QAAQ,QAAK,WAAW,CAAC,CAAC;SACtD;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAwBD,yBAAM,GAAN,UACI,OAAuF,EACvF,YAAmF;QAEnF,IAAM,GAAG,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;QAEjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE;gBACzC,IAAM,QAAQ,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAE,YAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;gBAC5F,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,gBAAS,SAAiB,EAAK,QAAQ,CAAE,CAAC;aAC7D;SACJ;QACD,OAAW,IAAI,CAAC,QAAQ,SAAE;IAC9B,CAAC;IAaD,yBAAM,GAAN,UAAO,OAA8D;QAArE,iBAYC;QAXG,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM;gBACvC,OAAO,CAAE,OAAe,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;SACN;aAAM;YACH,IAAM,KAAG,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;YACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM;gBACvC,OAAO,KAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;SACN;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACL,eAAC;AAAD,CAAC,AA/FD,IA+FC;;AAED,MAAM,UAAU,OAAO,CAAU,QAAmB,EAAE,OAAyB;IAC3E,OAAO,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { coerceArray, isFunction } from './helpers';\nimport { Id } from '../typings';\n\nexport interface EntityAddOptions {\n    prepend?: boolean;\n}\n\nexport interface ProducerOptions {\n    idKey?: string;\n}\n\nexport class Producer<TEntity> {\n    private idKey = '_id';\n\n    private entities: TEntity[];\n\n    constructor(entities: TEntity[], options?: ProducerOptions) {\n        this.entities = entities;\n        if (options && options.idKey) {\n            this.idKey = options.idKey;\n        }\n    }\n\n    /**\n     * Add an entity or entities.\n     *\n     * @example\n     * produce([users]).add(Entity);\n     * produce([users]).add([Entity, Entity]);\n     * produce([users]).add(Entity, { prepend: true });\n     */\n    add(entity: TEntity | TEntity[], addOptions?: EntityAddOptions): TEntity[] {\n        const addEntities = coerceArray(entity);\n        if (addEntities.length === 0) {\n            return;\n        }\n        if (addOptions && addOptions.prepend) {\n            this.entities = [...addEntities, ...this.entities];\n        } else {\n            this.entities = [...this.entities, ...addEntities];\n        }\n        return this.entities;\n    }\n\n    /**\n     *\n     * Update an entity or entities.\n     *\n     * @example\n     * produce([users]).update(3, {\n     *   name: 'New Name'\n     * });\n     *\n     * produce([users]).update(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  });\n     *\n     * produce([users]).update([1,2,3], {\n     *   name: 'New Name'\n     * });\n     */\n    update(id: Id | Id[] | null, newStateFn: (entity: Readonly<TEntity>) => Partial<TEntity>): TEntity[];\n    update(id: Id | Id[] | null, newState?: Partial<TEntity>): TEntity[];\n    update(\n        idsOrFn: Id | Id[] | null | Partial<TEntity> | ((entity: Readonly<TEntity>) => boolean),\n        newStateOrFn?: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>\n    ): TEntity[] {\n        const ids = coerceArray(idsOrFn);\n\n        for (let i = 0; i < this.entities.length; i++) {\n            const oldEntity = this.entities[i];\n            if (ids.indexOf(oldEntity[this.idKey]) >= 0) {\n                const newState = isFunction(newStateOrFn) ? (newStateOrFn as any)(oldEntity) : newStateOrFn;\n                this.entities[i] = { ...(oldEntity as any), ...newState };\n            }\n        }\n        return [...this.entities];\n    }\n\n    /**\n     *\n     * Remove one or more entities:\n     *\n     * @example\n     * produce([users]).remove(5);\n     * produce([users]).remove([1,2,3]);\n     * produce([users]).remove(entity => entity.id === 1);\n     */\n    remove(id: Id | Id[]): TEntity[];\n    remove(predicate: (entity: Readonly<TEntity>) => boolean): TEntity[];\n    remove(idsOrFn?: Id | Id[] | ((entity: Readonly<TEntity>) => boolean)): TEntity[] {\n        if (isFunction(idsOrFn)) {\n            this.entities = this.entities.filter(entity => {\n                return !(idsOrFn as any)(entity);\n            });\n        } else {\n            const ids = coerceArray(idsOrFn);\n            this.entities = this.entities.filter(entity => {\n                return ids.indexOf(entity[this.idKey]) === -1;\n            });\n        }\n        return this.entities;\n    }\n}\n\nexport function produce<TEntity>(entities: TEntity[], options?: ProducerOptions) {\n    return new Producer(entities, options);\n}\n"]}