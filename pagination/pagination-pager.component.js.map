{"version":3,"file":"pagination-pager.component.js","sourceRoot":"","sources":["../../.tmp/pagination/pagination-pager.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACH,SAAS,EACT,KAAK,EAEL,MAAM,EACN,YAAY,EAGf,MAAM,eAAe,CAAC;AAMvB;IAiBI;QANU,cAAS,GAAyB,IAAI,YAAY,EAAU,CAAC;QAGhE,iBAAY,GAAY,KAAK,CAAC;QAC9B,iBAAY,GAAY,KAAK,CAAC;IAEtB,CAAC;IAEhB,oDAAc,GAAd,UAAe,QAAgB,EAAE,GAAe;QAAf,oBAAA,EAAA,OAAe;QAC5C,IAAM,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;QAC7C,IAAM,MAAM,GAAa,IAAI,KAAK,CAAC,SAAS,CAAC;aACxC,IAAI,CAAC,EAAE,CAAC;aACR,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,QAAQ,EAAZ,CAAY,CAAC,CAAC;QACjC,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,gDAAU,GAAV,UAAW,OAAe,EAAE,KAAa;QACrC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC9B,OAAO,CAAC,OAAO,EAAC,KAAK,CAAC,CAAC;SAC1B;QAED,IAAM,UAAU,GAAW,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACjE,IAAI,KAAK,IAAI,UAAU,EAAE;YACrB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC9B,IAAM,MAAM,GAAa,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,OAAO,MAAM,CAAC;SACjB;QAED,IAAM,IAAI,GAAW,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAM,GAAG,GAAW,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACjD,IAAM,GAAG,GAAW,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QAEzC,IAAI,OAAO,GAAG,IAAI,IAAI,GAAG,EAAE;YACvB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;SACtD;QACD,IAAI,OAAO,GAAG,IAAI,IAAI,GAAG,EAAE;YACvB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,gDAAU,GAAV,UAAW,IAAa,EAAE,IAAa;QACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,iDAAW,GAAX,UAAY,EAAU;QAClB,IAAM,IAAI,GAAW,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,gDAAU,GAAV,UAAW,IAAY;QACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,8CAAQ,GAAR;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,iDAAW,GAAX,UAAY,OAAsB;QAC9B,IAAI,CAAC,OAAO,EAAE;YACV,OAAO;SACV;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAhFQ;QAAR,KAAK,EAAE;;gEAAiB;IAEhB;QAAR,KAAK,EAAE;;8DAAe;IAEd;QAAR,KAAK,EAAE;;oEAAqB;IAEpB;QAAR,KAAK,EAAE;;kEAAmB;IAElB;QAAR,KAAK,EAAE;;6DAAe;IAEb;QAAT,MAAM,EAAE;kCAAY,YAAY;kEAAsC;IAX9D,2BAA2B;QAJvC,SAAS,CAAC;YACP,QAAQ,EAAE,sBAAsB;YAChC,QAAQ,EAAE,g6BAAg6B;SAC76B,CAAC;;OACW,2BAA2B,CAkFvC;IAAD,kCAAC;CAAA,AAlFD,IAkFC;SAlFY,2BAA2B","sourcesContent":["import {\n    Component,\n    Input,\n    OnInit,\n    Output,\n    EventEmitter,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\n\n@Component({\n    selector: 'thy-pagination-pager',\n    template: \"<ul class=\\\"thy-pager\\\"> <li class=\\\"thy-pager-item\\\" [class.active]=\\\"current === 1\\\" (click)=\\\"clickHandle(1)\\\" *ngIf=\\\"count > 0 && !mini\\\" > 1 </li> <li class=\\\"thy-pager-item\\\" [class.active]=\\\"current === 2\\\" (click)=\\\"clickHandle(2)\\\" *ngIf=\\\"reservedNum === 2 && showPrevMore\\\" > 2 </li> <li *ngIf=\\\"showPrevMore\\\" class=\\\"thy-pager-item thy-pager-item-more \\\"></li> <li class=\\\"thy-pager-item\\\" *ngFor=\\\"let pager of pagers\\\" (click)=\\\"clickHandle(pager)\\\" [class.active]=\\\"current === pager\\\" > {{ pager }} </li> <li *ngIf=\\\"showNextMore\\\" class=\\\"thy-pager-item thy-pager-item-more\\\"></li> <li class=\\\"thy-pager-item\\\" [class.active]=\\\"current === count - 1\\\" (click)=\\\"clickHandle(count - 1)\\\" *ngIf=\\\"reservedNum === 2 && showNextMore\\\" > {{ count - 1 }} </li> <li class=\\\"thy-pager-item\\\" [class.active]=\\\"current === count\\\" (click)=\\\"clickHandle(count)\\\" *ngIf=\\\"count > 1 && !mini\\\" > {{ count }} </li> </ul> \"\n})\nexport class ThyPaginationPagerComponent implements OnInit, OnChanges {\n    @Input() current: number;\n\n    @Input() count: number;\n\n    @Input() reservedNum: number;\n\n    @Input() pagerSize: number;\n\n    @Input() mini: boolean;\n\n    @Output() clickPage: EventEmitter<number> = new EventEmitter<number>();\n\n    public pagers: number[];\n    public showPrevMore: Boolean = false;\n    public showNextMore: Boolean = false;\n\n    constructor() {}\n\n    pagerGenerator(minValue: number, all: number = 0): number[] {\n        const pagerSize = all ? all : this.pagerSize;\n        const target: number[] = new Array(pagerSize)\n            .fill('')\n            .map((v, i) => i + minValue);\n        return target;\n    }\n\n    makePagers(current: number, count: number): number[] {\n        if (this.mini) {\n            this.setMoreBtn(false, false);\n            return [current,count];\n        }\n\n        const pagerCount: number = this.pagerSize + this.reservedNum * 2;\n        if (count <= pagerCount) {\n            this.setMoreBtn(false, false);\n            const target: number[] = this.pagerGenerator(2, count);\n            target.length = count - 2 >= 0 ? count - 2 : 0;\n            return target;\n        }\n\n        const half: number = (this.pagerSize - 1) / 2;\n        const max: number = count - this.reservedNum - 1;\n        const min: number = this.reservedNum + 2;\n\n        if (current + half >= max) {\n            this.setMoreBtn(true, false);\n            return this.pagerGenerator(count - this.pagerSize);\n        }\n        if (current - half <= min) {\n            this.setMoreBtn(false, true);\n            return this.pagerGenerator(2);\n        }\n\n        this.setMoreBtn(true, true);\n        return this.pagerGenerator(current - half);\n    }\n\n    setMoreBtn(prev: boolean, next: boolean): void {\n        this.showPrevMore = prev;\n        this.showNextMore = next;\n    }\n\n    clickHandle(to: number): void {\n        const step: number = to - this.current;\n        this.clickPage.emit(step);\n    }\n\n    jumpHandle(step: number): void {\n        this.clickPage.emit(step);\n    }\n\n    ngOnInit(): void {\n        this.pagers = this.makePagers(this.current, this.count);\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!changes) {\n            return;\n        }\n        this.pagers = this.makePagers(this.current, this.count);\n    }\n}\n"]}