{"version":3,"file":"input-group.component.js","sourceRoot":"","sources":["../../.tmp/input/input-group.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACH,SAAS,EAAE,WAAW,EAAE,KAAK,EAC7B,YAAY,EAAE,WAAW,EAAE,UAAU,EACrC,iBAAiB,EACpB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,YAAY,EAAE,sBAAsB,EAAE,MAAM,WAAW,CAAC;AAIjE,IAAM,iBAAiB,GAAG;IACtB,IAAI,EAAE,CAAC,gBAAgB,CAAC;IACxB,IAAI,EAAE,CAAC,gBAAgB,CAAC;CAC3B,CAAC;AAUF;IA6CI,gCACY,YAA0B,EAC1B,sBAA8C,EAC9C,UAAsB;QAFtB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,eAAU,GAAV,UAAU,CAAY;QA1CI,kBAAa,GAAG,IAAI,CAAC;QA4CvD,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC5E,CAAC;IA1CD,sBAAI,iDAAa;aAAjB,UAAkB,KAAa;YAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAAA;IAGD,sBAAI,6DAAyB;aAA7B,UAA8B,KAAa;YACvC,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACtD;QACL,CAAC;;;OAAA;IAGD,sBAAI,kDAAc;aAAlB,UAAmB,KAAa;YAC5B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAAA;IAGD,sBAAI,8DAA0B;aAA9B,UAA+B,KAAa;YACxC,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACvD;QACL,CAAC;;;OAAA;IAGD,sBAAI,2CAAO;aAAX,UAAY,IAAoB;YAC5B,IAAI,IAAI,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE;gBACjC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;aACpE;iBAAM;gBACH,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;aAC/C;QACL,CAAC;;;OAAA;IAjCqC;QAArC,WAAW,CAAC,uBAAuB,CAAC;;iEAAsB;IAG3D;QADC,KAAK,EAAE;;;+DAGP;IAGD;QADC,KAAK,EAAE;;;2EAKP;IAGD;QADC,KAAK,EAAE;;;gEAGP;IAGD;QADC,KAAK,EAAE;;;4EAKP;IAGD;QADC,KAAK,EAAE;;;yDAOP;IAEuB;QAAvB,YAAY,CAAC,QAAQ,CAAC;kCAAiB,WAAW;kEAAM;IAEhC;QAAxB,YAAY,CAAC,SAAS,CAAC;kCAAkB,WAAW;mEAAM;IA3ClD,sBAAsB;QARlC,SAAS,CAAC;YACP,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,qhBAAqhB;YAC/hB,SAAS,EAAE;gBACP,sBAAsB;aACzB;YACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;SACxC,CAAC;yCA+C4B,YAAY;YACF,sBAAsB;YAClC,UAAU;OAhDzB,sBAAsB,CAoDlC;IAAD,6BAAC;CAAA,AApDD,IAoDC;SApDY,sBAAsB","sourcesContent":["import {\n    Component, HostBinding, Input,\n    ContentChild, TemplateRef, ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ThyTranslate, UpdateHostClassService } from '../shared';\n\nexport type InputGroupSize = 'sm' | 'lg' | '';\n\nconst inputGroupSizeMap = {\n    'sm': ['input-group-sm'],\n    'lg': ['input-group-lg']\n};\n\n@Component({\n    selector: 'thy-input-group',\n    template: \"<div class=\\\"input-group-prepend\\\" *ngIf=\\\"prependText\\\"> <span class=\\\"input-group-text\\\">{{prependText}}</span> </div> <div class=\\\"input-group-prepend\\\" *ngIf=\\\"prependTemplate\\\"> <ng-template *ngTemplateOutlet=\\\"prependTemplate\\\"></ng-template> </div> <ng-content></ng-content> <div class=\\\"input-group-append\\\" *ngIf=\\\"appendText\\\"> <span class=\\\"input-group-text\\\">{{appendText}}</span> </div> <div class=\\\"input-group-append\\\" *ngIf=\\\"appendTemplate\\\"> <ng-template *ngTemplateOutlet=\\\"appendTemplate\\\"></ng-template> </div>\",\n    providers: [\n        UpdateHostClassService\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyInputGroupComponent {\n\n    public appendText: string;\n\n    public prependText: string;\n\n    @HostBinding('class.thy-input-group') _isInputGroup = true;\n\n    @Input()\n    set thyAppendText(value: string) {\n        this.appendText = value;\n    }\n\n    @Input()\n    set thyAppendTextTranslateKey(value: string) {\n        if (value) {\n            this.appendText = this.thyTranslate.instant(value);\n        }\n    }\n\n    @Input()\n    set thyPrependText(value: string) {\n        this.prependText = value;\n    }\n\n    @Input()\n    set thyPrependTextTranslateKey(value: string) {\n        if (value) {\n            this.prependText = this.thyTranslate.instant(value);\n        }\n    }\n\n    @Input()\n    set thySize(size: InputGroupSize) {\n        if (size && inputGroupSizeMap[size]) {\n            this.updateHostClassService.updateClass(inputGroupSizeMap[size]);\n        } else {\n            this.updateHostClassService.updateClass([]);\n        }\n    }\n\n    @ContentChild('append') appendTemplate: TemplateRef<any>;\n\n    @ContentChild('prepend') prependTemplate: TemplateRef<any>;\n\n    constructor(\n        private thyTranslate: ThyTranslate,\n        private updateHostClassService: UpdateHostClassService,\n        private elementRef: ElementRef\n    ) {\n        this.updateHostClassService.initializeElement(elementRef.nativeElement);\n    }\n}\n"]}