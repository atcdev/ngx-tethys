{"version":3,"file":"datepicker.service.js","sourceRoot":"","sources":["../../.tmp/datepicker/datepicker.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAC3D,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAClE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAC/D,OAAO,YAAY,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAE,0CAA0C,EAAE,iDAAiD,EAAE,MAAM,QAAQ,CAAC;AACvH,kBAAkB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;AAG5C;IAmBI,8BAAmB,aAA8B;QAA9B,kBAAa,GAAb,aAAa,CAAiB;QAlBjD,aAAQ,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC;QAEnC,WAAM,GAAG,OAAO,CAAC;QAEjB,YAAO,GAAG,WAAW,EAAE,CAAC;QAMxB,UAAK,GAMD,EAAE,CAAC;IAE6C,CAAC;IAErD,yCAAU,GAAV,UAAW,KAAc;QACrB,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACzB;QACD,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,OAAO;SACV;QACD,QAAQ,IAAI,CAAC,MAAM,EAAE;YACjB,KAAK,OAAO,CAAC;YACb,KAAK,OAAO;gBACR,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;gBACnD,MAAM;YACV,KAAK,OAAO;gBACR,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBACjD,MAAM;YACV,KAAK,OAAO;gBACR,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;gBACnD,MAAM;SACb;QACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,4CAAa,GAAb,UAAc,KAAU,EAAE,aAAuB;QAC7C,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;QAC/B,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE;YAC5B,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,0CAA0C,CAAC,KAAK,CAAC,CAAC;YAC/E,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;SAC7E;QACD,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE;YAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,iDAAiD,CAAC,KAAK,CAAC,CAAC;SAC/E;IACL,CAAC;IAtDQ,oBAAoB;QADhC,UAAU,EAAE;yCAoByB,eAAe;OAnBxC,oBAAoB,CAuDhC;IAAD,2BAAC;CAAA,AAvDD,IAuDC;SAvDY,oBAAoB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BsLocaleService } from 'ngx-bootstrap/datepicker';\nimport { listLocales, defineLocale } from 'ngx-bootstrap/chronos';\nimport { zhCnLocale, jaLocale, enGbLocale } from 'ngx-bootstrap/locale';\nimport { DatePipe, registerLocaleData } from '@angular/common';\nimport localeZhHans from '@angular/common/locales/zh-Hans';\nimport { daterangepickerUtilIdentificationValueType, daterangepickerUtilConvertToDaterangepickerObject } from './util';\nregisterLocaleData(localeZhHans, 'zh-Hans');\n\n@Injectable()\nexport class ThyDatepickerService {\n    dataPipe = new DatePipe('zh-Hans');\n\n    locale = 'zh-cn';\n\n    locales = listLocales();\n\n    localeRef: any;\n\n    storeType: 'date' | 'range';\n\n    store: {\n        originValue?: any;\n        originValueType?: any;\n        originWithTime?: boolean;\n        value?: any;\n        withTime?: boolean;\n    } = {};\n\n    constructor(public localeService: BsLocaleService) {}\n\n    initLocale(value?: string) {\n        if (value) {\n            this.locale = value;\n            this.localeRef = null;\n        }\n        if (this.localeRef) {\n            return;\n        }\n        switch (this.locale) {\n            case 'zh-cn':\n            case 'zh-tw':\n                zhCnLocale.week.dow = 0;\n                this.localeRef = defineLocale('zh-cn', zhCnLocale);\n                break;\n            case 'ja-jp':\n                this.localeRef = defineLocale('ja-jp', jaLocale);\n                break;\n            case 'en-us':\n                this.localeRef = defineLocale('en-us', enGbLocale);\n                break;\n        }\n        this.localeService.use(this.locale);\n    }\n\n    initValueData(value: any, isRefreshType?: boolean) {\n        this.store.originValue = value;\n        if (this.storeType === 'range') {\n            this.store.originValueType = daterangepickerUtilIdentificationValueType(value);\n            this.store.originWithTime = value && value.begin && value.begin.with_time;\n        }\n        if (this.storeType === 'range') {\n            this.store.value = daterangepickerUtilConvertToDaterangepickerObject(value);\n        }\n    }\n}\n"]}