{"version":3,"file":"modal.service.js","sourceRoot":"","sources":["../../.tmp/modal/modal.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAe,gBAAgB,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AACxF,OAAO,EAAE,cAAc,EAA4B,MAAM,qBAAqB,CAAC;AAC/E,OAAO,EAAE,sBAAsB,EAAE,MAAM,gCAAgC,CAAC;AAExE,IAAM,mBAAmB,GAAG;IACxB,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,KAAK,EAAE,IAAI;IACX,IAAI,EAAE,KAAK;IACX,mBAAmB,EAAE,KAAK;IAC1B,KAAK,EAAE,EAAE;IACT,QAAQ,EAAE,IAAI;IACd,YAAY,EAAE,EAAE;CACnB,CAAC;AAGF;IAAqC,mCAAc;IAS/C,yBAAoB,YAA4B,EAAE,eAAiC,EAAE,GAA2B;QAAhH,YACI,kBAAM,eAAe,EAAE,GAAG,CAAC,SAM9B;QAPmB,kBAAY,GAAZ,YAAY,CAAgB;QARhD,YAAM,GAAsB,IAAI,YAAY,EAAE,CAAC;QAC/C,aAAO,GAAsB,IAAI,YAAY,EAAE,CAAC;QAChD,YAAM,GAAsB,IAAI,YAAY,EAAE,CAAC;QAC/C,cAAQ,GAAsB,IAAI,YAAY,EAAE,CAAC;QAGzC,iBAAW,GAAiB,EAAE,CAAC;QAInC,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC;YACjC,IAAI,KAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aAC3D;QACL,CAAC,CAAC,CAAC;;IACP,CAAC;IAED,8BAAI,GAAJ,UAAK,OAAwC,EAAE,MAA2B;QACtE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACrE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,+BAAK,GAAL;QACI,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;SACxD;IACL,CAAC;IAEO,wCAAc,GAAtB,UAAuB,MAA0B;QAC7C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,mBAAmB,EAAE,MAAM,CAAC,CAAC;QAClE,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;YACvB,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,WAAS,MAAM,CAAC,IAAM,CAAC;SACnD;IACL,CAAC;IApCQ,eAAe;QAD3B,UAAU,EAAE;yCAUyB,cAAc,EAAmB,gBAAgB,EAAO,sBAAsB;OATvG,eAAe,CAqC3B;IAAD,sBAAC;CAAA,AArCD,CAAqC,cAAc,GAqClD;SArCY,eAAe;AAuC5B;IAAA;IASA,CAAC;IAAD,yBAAC;AAAD,CAAC,AATD,IASC","sourcesContent":["import { Injectable, TemplateRef, RendererFactory2, EventEmitter } from '@angular/core';\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\n\nconst modalConfigDefaults = {\n    backdrop: true,\n    keyboard: true,\n    focus: true,\n    show: false,\n    ignoreBackdropClick: false,\n    class: '',\n    animated: true,\n    initialState: {}\n};\n\n@Injectable()\nexport class ThyModalService extends BsModalService {\n    onShow: EventEmitter<any> = new EventEmitter();\n    onShown: EventEmitter<any> = new EventEmitter();\n    onHide: EventEmitter<any> = new EventEmitter();\n    onHidden: EventEmitter<any> = new EventEmitter();\n\n    private modalConfig: ModalOptions;\n    private bsModalRefs: BsModalRef[] = [];\n\n    constructor(private modalService: BsModalService, rendererFactory: RendererFactory2, clf: ComponentLoaderFactory) {\n        super(rendererFactory, clf);\n        this.modalService.onHidden.subscribe(() => {\n            if (this.bsModalRefs.length > 0) {\n                this.bsModalRefs.splice(this.bsModalRefs.length - 1, 1);\n            }\n        });\n    }\n\n    show(content: string | TemplateRef<any> | any, config?: ThyModalConfigInfo): BsModalRef {\n        this.setModalConfig(config);\n        const bsModalRef = this.modalService.show(content, this.modalConfig);\n        this.bsModalRefs.push(bsModalRef);\n        return bsModalRef;\n    }\n\n    close() {\n        if (this.bsModalRefs.length > 0) {\n            this.bsModalRefs[this.bsModalRefs.length - 1].hide();\n        }\n    }\n\n    private setModalConfig(config: ThyModalConfigInfo) {\n        this.modalConfig = Object.assign({}, modalConfigDefaults, config);\n        if (config && config.size) {\n            this.modalConfig.class = `modal-${config.size}`;\n        }\n    }\n}\n\nexport class ThyModalConfigInfo {\n    size?: string; // 默认md大小，'blg','lg','mg','sm'\n    backdrop?: string | boolean; // true || false || 'static'\n    keyboard?: boolean;\n    animated?: boolean;\n    ignoreBackdropClick?: boolean;\n    initialState?: object;\n    class?: string;\n    show?: boolean; // Shows the modal when initialized.\n}\n"]}