{"version":3,"file":"root-store.js","sourceRoot":"","sources":["../../.tmp/store/root-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Store } from './store';\nimport { Inject, SkipSelf, Optional, OnDestroy, isDevMode } from '@angular/core';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport getReduxDevToolsPlugin, { StorePlugin } from './plugins/redux_devtools';\nimport { ActionState } from './action-state';\n\nexport type StoreInstanceMap = Map<string, Store<any>>; // Map key：string，value：状态数据\n\n/**\n * @internal\n */\nexport class RootStore implements OnDestroy {\n    private static _rootStore: RootStore;\n    /**\n     * 数据流 数据是一个Map，k,v键值对，关键字->状态数据\n     */\n    private readonly _containers = new BehaviorSubject<StoreInstanceMap>(\n        new Map<string, Store<any>>()\n    );\n    private _plugin: StorePlugin = getReduxDevToolsPlugin();\n    private _combinedStateSubscription: Subscription = new Subscription();\n    public static getSingletonRootStore() {\n        if (!this._rootStore) {\n            this._rootStore = new RootStore();\n        }\n        return this._rootStore;\n    }\n    constructor(\n    ) {\n        if (this._plugin.isConnectSuccessed()) {\n            this._assignCombinedState(); // 最终调用handleNewState\n            console.log(`是否在Angular开发环境：${isDevMode()}, 初始化root-store`);\n        }\n    }\n\n    private _assignCombinedState() {\n        this._combinedStateSubscription = this._containers\n            .pipe(switchMap(containers => this._getCombinedState(containers)))\n            .pipe(\n                map(states => {\n                    const actionName = ActionState.getActionName();\n                    const state = states.reduce(\n                        (acc, curr) => {\n                            acc[curr.containerName] = curr.state;\n                            return acc;\n                        },\n                        <{ [key: string]: any }>{}\n                    );\n                    return { state: state, actionName: actionName };\n                })\n            )\n            .subscribe(c => {\n                this._plugin.handleNewState(c.actionName, c.state);\n            });\n    }\n\n    /**\n     * 合并数据流\n     * 合并状态数据，把状态数据转换为这样的数据：{ containerName: string, state: any }，并且\n     * 通过combineLatest合并成一个数据数据流，这样状态数据只有涉及更新，那么这边就会得到通知\n     * @param containers 状态数据的Map\n     */\n    private _getCombinedState(containers: StoreInstanceMap) {\n        return combineLatest(\n            ...Array.from(containers.entries()).map(([containerName, container]) => {\n                return container.state$.pipe(map(state => ({ containerName, state })), tap((data) => {\n                }));\n            })\n        );\n    }\n\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._combinedStateSubscription.unsubscribe();\n    }\n\n    /**\n     * @internal\n     */\n    registerStore(store: Store<any>) {\n        const containers = new Map(this._containers.value);\n        if (containers.has(store.getStoreInstanceId())) {\n            throw new Error(\n                `Store: Store with duplicate instance ID found! ${store.getStoreInstanceId()}` +\n                ` is already registered. Please check your getStoreInstanceId() methods!`\n            );\n        }\n        containers.set(store.getStoreInstanceId(), store);\n        this._containers.next(containers);\n    }\n\n    existStoreInstanceId(instanceId: string): boolean {\n        const containers = new Map(this._containers.value);\n        if (containers.has(instanceId)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @internal\n     */\n    unregisterStore(store: Store<any>) {\n        const containers = new Map(this._containers.value);\n        containers.delete(store.getStoreInstanceId());\n        this._containers.next(containers);\n    }\n}\n"]}