{"version":3,"file":"dialog.service.js","sourceRoot":"","sources":["../../.tmp/dialog/dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, TemplateRef, Injector, Optional, OnDestroy, Inject } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { of, Subject } from 'rxjs';\nimport { ComponentType, PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { ThyDialogConfig, ThyDialogSizes, THY_DIALOG_DEFAULT_OPTIONS } from './dialog.config';\nimport { Overlay, OverlayConfig, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ThyDialogContainerComponent } from './dialog-container.component';\nimport { ThyDialogRef, ThyDialogRefInternal } from './dialog-ref';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { helpers } from '../util';\nimport { ThyClickPositioner } from '../core';\nimport { ThyConfirmComponent } from './confirm/confirm.component';\nimport { ThyConfirmConfig } from './confirm.config';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyDialog implements OnDestroy {\n    private openedDialogs: ThyDialogRef<any>[] = [];\n\n    private readonly _afterAllClosed = new Subject<void>();\n\n    private readonly _afterOpened = new Subject<ThyDialogRef<any>>();\n\n    private getOverlayPanelClasses(dialogConfig: ThyDialogConfig) {\n        let classes = [`cdk-overlay-pane`, `dialog-overlay-pane`];\n        const size = dialogConfig.size || ThyDialogSizes.md;\n        classes.push(`dialog-${size}`);\n        if (dialogConfig.panelClass) {\n            if (helpers.isArray(dialogConfig.panelClass)) {\n                classes = classes.concat(dialogConfig.panelClass);\n            } else {\n                classes.push(dialogConfig.panelClass as string);\n            }\n        }\n        return classes;\n    }\n\n    private getOverlayConfig(dialogConfig: ThyDialogConfig): OverlayConfig {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this.overlay.scrollStrategies.block(),\n            panelClass: this.getOverlayPanelClasses(dialogConfig),\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n\n        if (dialogConfig.backdropClass) {\n            overlayConfig.backdropClass = dialogConfig.backdropClass;\n        }\n\n        return overlayConfig;\n    }\n\n    private createInjector<T>(\n        config: ThyDialogConfig,\n        dialogRef: ThyDialogRef<T>,\n        dialogContainer: ThyDialogContainerComponent\n    ): PortalInjector {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n        const injectionTokens = new WeakMap<any, any>([\n            [ThyDialogContainerComponent, dialogContainer],\n            [ThyDialogRef, dialogRef]\n        ]);\n\n        if (config.direction && (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n            injectionTokens.set(Directionality, {\n                value: config.direction,\n                change: of()\n            });\n        }\n\n        return new PortalInjector(userInjector || this.injector, injectionTokens);\n    }\n\n    private attachDialogContainer(overlay: OverlayRef, config: ThyDialogConfig): ThyDialogContainerComponent {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = new PortalInjector(userInjector || this.injector, new WeakMap([[ThyDialogConfig, config]]));\n        const containerPortal = new ComponentPortal(ThyDialogContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlay.attach<ThyDialogContainerComponent>(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    private attachDialogContent<T, TResult>(\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n        dialogContainer: ThyDialogContainerComponent,\n        overlayRef: OverlayRef,\n        config: ThyDialogConfig\n    ): ThyDialogRef<T, TResult> {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new ThyDialogRefInternal<T, TResult>(overlayRef, dialogContainer, config.id);\n\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe(() => {\n                if (dialogRef.backdropClosable) {\n                    dialogRef.close();\n                }\n            });\n        }\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(\n                new TemplatePortal<T>(componentOrTemplateRef, null, <any>{\n                    $implicit: config.initialState,\n                    dialogRef\n                })\n            );\n        } else {\n            const injector = this.createInjector<T>(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal<T>(\n                new ComponentPortal(componentOrTemplateRef, undefined, injector)\n            );\n            if (config.initialState) {\n                Object.assign(contentRef.instance, config.initialState);\n            }\n            dialogRef.componentInstance = contentRef.instance;\n        }\n\n        dialogRef.updateSizeAndPosition(config.width, config.height, config.position);\n        return dialogRef;\n    }\n\n    private removeOpenedDialog(dialogRef: ThyDialogRef<any>) {\n        const index = this.openedDialogs.indexOf(dialogRef);\n\n        if (index > -1) {\n            this.openedDialogs.splice(index, 1);\n\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openedDialogs.length) {\n                // this._ariaHiddenElements.forEach((previousValue, element) => {\n                //   if (previousValue) {\n                //     element.setAttribute('aria-hidden', previousValue);\n                //   } else {\n                //     element.removeAttribute('aria-hidden');\n                //   }\n                // });\n                // this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional()\n        @Inject(THY_DIALOG_DEFAULT_OPTIONS)\n        private defaultConfig: ThyDialogConfig,\n        clickPositioner: ThyClickPositioner\n    ) {\n        clickPositioner.initialize();\n    }\n\n    open<T, TData = any, TResult = any>(\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n        config?: ThyDialogConfig<TData>\n    ): ThyDialogRef<T, TResult> {\n        config = { ...this.defaultConfig, ...config };\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id ${config.id} exists already. The dialog id must be unique.`);\n        }\n\n        const overlayConfig: OverlayConfig = this.getOverlayConfig(config);\n        const overlayRef = this.overlay.create(overlayConfig);\n\n        const dialogContainer = this.attachDialogContainer(overlayRef, config);\n        const dialogRef = this.attachDialogContent<T, TResult>(\n            componentOrTemplateRef,\n            dialogContainer,\n            overlayRef,\n            config\n        );\n\n        this.openedDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this.removeOpenedDialog(dialogRef));\n        this._afterOpened.next(dialogRef);\n\n        return dialogRef;\n    }\n\n    confirm<T>(options: ThyConfirmConfig) {\n        return this.open(ThyConfirmComponent, {\n            initialState: {\n                options: options\n            }\n        });\n    }\n\n    afterAllClosed() {\n        return this._afterAllClosed;\n    }\n\n    afterOpened() {\n        return this._afterOpened;\n    }\n\n    getDialogById(id: string): ThyDialogRef<any> | undefined {\n        return this.openedDialogs.find(dialog => dialog.id === id);\n    }\n\n    /**\n     * Finds the closest ThyDialogRef to an element by looking at the DOM.\n     */\n    getClosestDialog(element: HTMLElement): ThyDialogRef<any> | undefined {\n        let parent: HTMLElement | null = element.parentElement;\n\n        while (parent && !parent.classList.contains('thy-dialog-container')) {\n            parent = parent.parentElement;\n        }\n        if (parent && parent.id) {\n            return this.getDialogById(parent.id);\n        }\n        return null;\n    }\n\n    close(result?: any) {\n        if (this.openedDialogs.length > 0) {\n            const lastDialogRef = this.openedDialogs[this.openedDialogs.length - 1];\n            if (lastDialogRef) {\n                lastDialogRef.close(result);\n            }\n        }\n    }\n\n    closeAll() {\n        let i = this.openedDialogs.length;\n        while (i--) {\n            // 不需要操作 openedDialogs, 因为 close 会触发 afterClosed 的订阅\n            // 触发订阅后会自动从 openedDialogs 中移除\n            this.openedDialogs[i].close();\n        }\n    }\n\n    ngOnDestroy() {\n        this.closeAll();\n        this._afterAllClosed.complete();\n        this._afterOpened.complete();\n    }\n}\n"]}