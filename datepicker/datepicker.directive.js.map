{"version":3,"file":"datepicker.directive.js","sourceRoot":"","sources":["../../.tmp/datepicker/datepicker.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACH,SAAS,EAET,UAAU,EACV,SAAS,EACT,gBAAgB,EAChB,KAAK,EAIL,UAAU,EAGb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,sBAAsB,EAAmB,MAAM,gCAAgC,CAAC;AACzF,OAAO,EAAE,+BAA+B,EAAE,MAAM,kCAAkC,CAAC;AACnF,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAC1D,OAAO,EAAwB,4BAA4B,EAAE,MAAM,gBAAgB,CAAC;AACpF,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAC/D,OAAO,YAAY,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAA8B,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AAClF,OAAO,EAAE,qCAAqC,EAAE,uCAAuC,EAAE,MAAM,QAAQ,CAAC;AACxG,OAAO,EAAE,qBAAqB,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAE3F,kBAAkB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;AAE5C,IAAM,YAAY,GAAG;IACjB,OAAO,EAAE,YAAY;IACrB,KAAK,EAAE,YAAY;IACnB,IAAI,EAAE,kBAAkB;CAC3B,CAAC;AAEF,IAAM,yBAAyB,GAAG;IAC9B,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,sBAAsB,EAAtB,CAAsB,CAAC;IACrD,KAAK,EAAE,IAAI;CACd,CAAC;AAMF;IAqBI,iEAAiE;IAEjE,gCACW,OAA4B,EAC3B,WAAuB,EACvB,SAAoB,EAC5B,iBAAmC,EACnC,GAA2B,EACnB,iBAAuC,EACvC,qBAA4C;QAN7C,YAAO,GAAP,OAAO,CAAqB;QAC3B,gBAAW,GAAX,WAAW,CAAY;QACvB,cAAS,GAAT,SAAS,CAAW;QAGpB,sBAAiB,GAAjB,iBAAiB,CAAsB;QACvC,0BAAqB,GAArB,qBAAqB,CAAuB;QA7BxD,aAAQ,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC;QAI3B,cAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QAC/B,eAAU,GAAG,QAAQ,CAAC,SAAS,CAAC;QAChC,wBAAmB,GAAG,KAAK,CAAC;QAI3B,iBAAY,GAAmB,cAAc,CAAC,MAAM,CAAC;QACrD,iBAAY,GAAG,IAAI,CAAC;QACpB,gBAAW,GAAG,OAAO,CAAC;QACtB,iBAAY,GAAG,MAAM,CAAC;QACtB,oBAAe,GAAG,IAAI,CAAC;QACvB,gBAAW,GAAG,KAAK,CAAC;QACpB,gBAAW,GAAG,KAAK,CAAC;QACpB,cAAS,GAAW,IAAI,CAAC;QAc9B,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,YAAY,CAAkC,WAAW,EAAE,iBAAiB,EAAE,SAAS,CAAC,CAAC;IAChH,CAAC;IAED,yCAAQ,GAAR;QAAA,iBASC;QARG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YAChB,YAAY,EAAE,IAAI,CAAC,eAAe;YAClC,QAAQ,EAAE,IAAI,CAAC,WAAW;YAC1B,IAAI,EAAE,cAAM,OAAA,KAAI,CAAC,IAAI,EAAE,EAAX,CAAW;YACvB,IAAI,EAAE;gBACF,KAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAED,mDAAkB,GAAlB;QACI,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAED,2CAAU,GAAV,UAAW,KAA2C;QAClD,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACjC,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,6CAA6C;SAChD;IACL,CAAC;IAED,iDAAgB,GAAhB,UAAiB,EAAuB;QACpC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,kDAAiB,GAAjB,UAAkB,EAAa;QAC3B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,qCAAI,GAAJ;QAAA,iBAwCC;QAvCG,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,OAAO;SACV;QAED,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;QACrC,IAAI,CAAC,GAAG,uCAAuC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAC/D,IAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO;aAChC,OAAO,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;aACjE,MAAM,CAAC,+BAA+B,CAAC;aACvC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC;YACtB,+CAA+C;aAC9C,IAAI,CAAC;YACF,UAAU,EAAE;gBACR,KAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;YACD,YAAY,EAAE;gBACV,QAAQ,EAAE,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC;gBAC/C,KAAK,EAAE,IAAI,CAAC,MAAM;gBAClB,QAAQ,EAAE,IAAI,CAAC,SAAS;gBACxB,OAAO,EAAE,uCAAuC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI;gBACtE,OAAO,EAAE,uCAAuC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI;gBACtE,WAAW,EAAE,UAAC,MAA4B;oBACtC,8CAA8C;oBAC9C,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;oBAC7B,KAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACpC,KAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;oBACjC,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBAChC,CAAC;aACJ;SACJ,CAAC,CAAC;QACP,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAClF,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC;YACnC,MAAM,EAAE,gBAAgB,CAAC,QAAQ;YACjC,MAAM,EAAE,IAAI,CAAC,WAAW;YACxB,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,MAAM,EAAE,CAAC;YACT,YAAY,EAAE,IAAI;SACrB,CAAC,CAAC;IACP,CAAC;IAED,qCAAI,GAAJ;QACI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACrF,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAEO,+CAAc,GAAtB,UAAuB,KAAiD,EAAE,aAAuB;QAC7F,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,UAAU,GAAG,qCAAqC,CAAC,KAAK,CAAC,CAAC;YAC/D,IAAI,CAAC,MAAM,GAAG,uCAAuC,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SACjF;aAAM;YACH,IAAI,CAAC,MAAM,GAAG,uCAAuC,CAAC,KAAK,CAAC,CAAC;SAChE;QACD,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAEO,oDAAmB,GAA3B;QACI,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,SAAS,GAAG;gBACb,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;gBACtB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;aACnC,CAAC;SACL;IACL,CAAC;IAEO,gDAAe,GAAvB,UAAwB,KAA4B;QAChD,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;SACjC;aAAM;YACH,4CAA4C;YAC5C,yBAAyB;YACzB,WAAW;YACX,IAAM,EAAE,GAAG,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC;YAChC,IAAI,EAAE,CAAC,SAAS,EAAE;gBACd,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC;aACpC;iBAAM;gBACH,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC;aACrC;YACD,IAAI;SACP;IACL,CAAC;IAEO,kDAAiB,GAAzB,UAA0B,KAAU;QAChC,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IACrF,CAAC;IAEO,oDAAmB,GAA3B,UAA4B,MAAW;QACnC,QAAQ,IAAI,CAAC,UAAU,EAAE;YACrB,KAAK,4BAA4B,CAAC,oBAAoB;gBAClD,IAAI,CAAC,MAAM,GAAG;oBACV,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI;oBACjD,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC9B,CAAC;gBACF,MAAM;YACV,KAAK,4BAA4B,CAAC,QAAQ;gBACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;gBAC1D,MAAM;YACV,KAAK,4BAA4B,CAAC,SAAS;gBACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;gBAC1D,MAAM;YACV;gBACI,IAAI,CAAC,MAAM,GAAG;oBACV,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;oBAC7D,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC9B,CAAC;gBACF,MAAM;SACb;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAtKQ;QAAR,KAAK,EAAE;;gEAAsD;IACrD;QAAR,KAAK,EAAE;;gEAAqB;IACpB;QAAR,KAAK,EAAE;;+DAAuB;IACtB;QAAR,KAAK,EAAE;;gEAAuB;IACtB;QAAR,KAAK,EAAE;;mEAAwB;IACvB;QAAR,KAAK,EAAE;;+DAAqB;IACpB;QAAR,KAAK,EAAE;;+DAAqB;IACpB;QAAR,KAAK,EAAE;;6DAA0B;IACzB;QAAR,KAAK,EAAE;;8DAA2B;IAC1B;QAAR,KAAK,EAAE;;8DAA2B;IApB1B,sBAAsB;QAJlC,SAAS,CAAC;YACP,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE,CAAC,yBAAyB,CAAC;SACzC,CAAC;yCAyBsB,mBAAmB;YACd,UAAU;YACZ,SAAS;YACT,gBAAgB;YAC9B,sBAAsB;YACA,oBAAoB;YAChB,qBAAqB;OA9B/C,sBAAsB,CAkLlC;IAAD,6BAAC;CAAA,AAlLD,IAkLC;SAlLY,sBAAsB","sourcesContent":["import {\n    Directive,\n    OnInit,\n    ElementRef,\n    Renderer2,\n    ViewContainerRef,\n    Input,\n    ComponentRef,\n    Output,\n    EventEmitter,\n    forwardRef,\n    OnChanges,\n    AfterContentInit\n} from '@angular/core';\nimport { ComponentLoaderFactory, ComponentLoader } from 'ngx-bootstrap/component-loader';\nimport { ThyDatepickerContainerComponent } from './datepicker-container.component';\nimport { ThyDatepickerConfig } from './datepicker.config';\nimport { DatepickerValueEntry, DatepickerValueShowTypesEnum } from './i.datepicker';\nimport { ThyDatepickerService } from './datepicker.service';\nimport { DatePipe, registerLocaleData } from '@angular/common';\nimport localeZhHans from '@angular/common/locales/zh-Hans';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isObject, isNumber, isDate, inputValueToBoolean } from '../util/helpers';\nimport { datepickerUtilIdentificationValueType, datepickerUtilConvertToDatepickerObject } from './util';\nimport { ThyPositioningService, PlacementTypes } from '../positioning/positioning.service';\n\nregisterLocaleData(localeZhHans, 'zh-Hans');\n\nconst FORMAT_RULES = {\n    default: 'yyyy-MM-dd',\n    short: 'yyyy-MM-dd',\n    full: 'yyyy-MM-dd HH:mm'\n};\n\nconst DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThyDatepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[thyDatepicker]',\n    providers: [DATEPICKER_VALUE_ACCESSOR]\n})\nexport class ThyDatepickerDirective implements OnInit, AfterContentInit, ControlValueAccessor {\n    dataPipe = new DatePipe('zh-Hans');\n    private _valueRef: DatepickerValueEntry;\n    private _value: DatepickerValueEntry | number | Date | any;\n    private _format: string;\n    private _onChange = Function.prototype;\n    private _onTouched = Function.prototype;\n    private _isAfterContentInit = false;\n    // private _isFirstInitValueWithNullOnce = false; // 第一次初始化，如果为null，显示时需要为空\n    private _loader: ComponentLoader<ThyDatepickerContainerComponent>;\n    private _valueType: DatepickerValueShowTypesEnum;\n    @Input() thyPlacement: PlacementTypes = PlacementTypes.bottom;\n    @Input() thyAutoAdapt = true;\n    @Input() thyTriggers = 'click';\n    @Input() thyContainer = 'body';\n    @Input() thyOutsideClick = true;\n    @Input() thyDisabled = false;\n    @Input() thyShowTime = false;\n    @Input() thyFormat: string = null;\n    @Input() thyMaxDate: Date | number;\n    @Input() thyMinDate: Date | number;\n    // @Output() thyOnChange: EventEmitter<any> = new EventEmitter();\n\n    constructor(\n        public _config: ThyDatepickerConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        _viewContainerRef: ViewContainerRef,\n        cis: ComponentLoaderFactory,\n        private datepickerService: ThyDatepickerService,\n        private thyPositioningService: ThyPositioningService\n    ) {\n        this._loader = cis.createLoader<ThyDatepickerContainerComponent>(_elementRef, _viewContainerRef, _renderer);\n    }\n\n    ngOnInit() {\n        this._loader.listen({\n            outsideClick: this.thyOutsideClick,\n            triggers: this.thyTriggers,\n            show: () => this.show(),\n            hide: () => {\n                this.hide();\n            }\n        });\n    }\n\n    ngAfterContentInit() {\n        this._isAfterContentInit = true;\n    }\n\n    writeValue(value: DatepickerValueEntry | Date | number) {\n        this._initValueDate(value, true);\n        if (this._isAfterContentInit) {\n            this._saveInitValueClone();\n            // this._isFirstInitValueWithNullOnce = true;\n        }\n    }\n\n    registerOnChange(fn: (value: any) => any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => any): void {\n        this._onTouched = fn;\n    }\n\n    show() {\n        if (this.thyDisabled) {\n            return;\n        }\n\n        this.datepickerService.initLocale();\n       let a=  datepickerUtilConvertToDatepickerObject(this.thyMinDate)\n        const dateContainerRef = this._loader\n            .provide({ provide: ThyDatepickerConfig, useValue: this._config })\n            .attach(ThyDatepickerContainerComponent)\n            .to(this.thyContainer)\n            // .position({ attachment: this.thyPlacement })\n            .show({\n                hideLoader: () => {\n                    this.hide();\n                },\n                initialState: {\n                    withTime: inputValueToBoolean(this.thyShowTime),\n                    value: this._value,\n                    valueRef: this._valueRef,\n                    maxDate: datepickerUtilConvertToDatepickerObject(this.thyMaxDate).date,\n                    minDate: datepickerUtilConvertToDatepickerObject(this.thyMinDate).date,\n                    changeValue: (result: DatepickerValueEntry) => {\n                        // this._isFirstInitValueWithNullOnce = false;\n                        this._initFormatRule(result);\n                        this._setInputProperty(result.date);\n                        this._sendValueToNgModel(result);\n                        this._initValueDate(result);\n                    }\n                }\n            });\n        this._renderer.addClass(this._elementRef.nativeElement, this._config.openedClass);\n        this.thyPositioningService.setPosition({\n            target: dateContainerRef.location,\n            attach: this._elementRef,\n            placement: this.thyPlacement,\n            autoAdapt: this.thyAutoAdapt,\n            offset: 2,\n            appendToBody: true\n        });\n    }\n\n    hide() {\n        this._renderer.removeClass(this._elementRef.nativeElement, this._config.openedClass);\n        this._loader.hide();\n    }\n\n    private _initValueDate(value: DatepickerValueEntry | Date | number | any, isRefreshType?: boolean) {\n        if (isRefreshType) {\n            this._valueType = datepickerUtilIdentificationValueType(value);\n            this._value = datepickerUtilConvertToDatepickerObject(value, this._valueType);\n        } else {\n            this._value = datepickerUtilConvertToDatepickerObject(value);\n        }\n        this._initFormatRule();\n        this._setInputProperty(this._value.date);\n    }\n\n    private _saveInitValueClone() {\n        if (this._value) {\n            this._valueRef = {\n                date: this._value.date,\n                with_time: this._value.with_time\n            };\n        }\n    }\n\n    private _initFormatRule(value?: DatepickerValueEntry) {\n        if (this.thyFormat) {\n            this._format = this.thyFormat;\n        } else {\n            // if (this._isFirstInitValueWithNullOnce) {\n            //     this._format = '';\n            // } else {\n            const _v = value || this._value;\n            if (_v.with_time) {\n                this._format = FORMAT_RULES.full;\n            } else {\n                this._format = FORMAT_RULES.short;\n            }\n            // }\n        }\n    }\n\n    private _setInputProperty(value: any) {\n        const initialDate = this.dataPipe.transform(value, this._format);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', initialDate);\n    }\n\n    private _sendValueToNgModel(result: any) {\n        switch (this._valueType) {\n            case DatepickerValueShowTypesEnum.datepickerTimeObject:\n                this._value = {\n                    date: result.date && result.date.getTime() / 1000,\n                    with_time: result.with_time\n                };\n                break;\n            case DatepickerValueShowTypesEnum.dateTime:\n                this._value = result.date && result.date.getTime() / 1000;\n                break;\n            case DatepickerValueShowTypesEnum.nullValue:\n                this._value = result.date && result.date.getTime() / 1000;\n                break;\n            default:\n                this._value = {\n                    date: result.date && Math.floor(result.date.getTime() / 1000),\n                    with_time: result.with_time\n                };\n                break;\n        }\n        this._onChange(this._value);\n    }\n}\n"]}