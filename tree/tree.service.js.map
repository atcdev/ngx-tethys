{"version":3,"file":"tree.service.js","sourceRoot":"","sources":["../../.tmp/tree/tree.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AAGtD,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAG/B;IAKI;QAFA,kBAAa,GAAG,IAAI,OAAO,EAA0B,CAAC;IAEtC,CAAC;IAET,8CAAqB,GAA7B,UACI,KAAoB,EACpB,IAAwB;QAF5B,iBASC;QAPG,qBAAA,EAAA,SAAwB;QAExB,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,6CAAoB,GAA3B,UACI,SAAwB,EACxB,MAAoB;QAFxB,iBAUC;QANG,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI;YAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;YACxD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACzB,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oCAAW,GAAlB,UAAmB,GAAW;QAC1B,IAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5D,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,KAAK,GAAG,EAAb,CAAa,CAAC,CAAC;IAC7C,CAAC;IAEM,yCAAgB,GAAvB;QACI,IAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5D,OAAO,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,EAAZ,CAAY,CAAC,CAAC;IAC9C,CAAC;IAEM,uCAAc,GAArB,UAAsB,IAAiB;QACnC,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU;YAC5B,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ;YAC1B,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;QACrB,IAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAlB,CAAkB,CAAC,CAAC;QAC1D,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACZ,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC7B;IACL,CAAC;IAED,sCAAa,GAAb;QACI,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;IAC7C,CAAC;IAED,oCAAW,GAAX;QACI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAzDQ,cAAc;QAD1B,UAAU,EAAE;;OACA,cAAc,CA0D1B;IAAD,qBAAC;CAAA,AA1DD,IA0DC;SA1DY,cAAc","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { helpers } from '../util';\nimport { ThyTreeNode } from './tree.class';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class ThyTreeService implements OnDestroy {\n    public treeNodes: ThyTreeNode[];\n\n    $statusChange = new Subject<ThyTreeFormatEmitEvent>();\n\n    constructor() { }\n\n    private _getParallelTreeNodes(\n        nodes: ThyTreeNode[],\n        list: ThyTreeNode[] = []\n    ) {\n        nodes.forEach(node => {\n            list.push(node);\n            this._getParallelTreeNodes(node.children || [], list);\n        });\n        return list;\n    }\n\n    public resetSortedTreeNodes(\n        treeNodes: ThyTreeNode[],\n        parent?: ThyTreeNode\n    ) {\n        treeNodes.forEach(node => {\n            node.level = node.parentNode ? node.parentNode.level + 1 : 0;\n            node.origin.children = node.children.map(n => n.origin);\n            node.parentNode = parent;\n            this.resetSortedTreeNodes(node.children, node);\n        });\n    }\n\n    public getTreeNode(key: string) {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.find(n => n.key === key);\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isExpanded);\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        const children = node.parentNode\n            ? node.parentNode.children\n            : this.treeNodes;\n        const index = children.findIndex(n => n.key === node.key);\n        if (index > -1) {\n            children.splice(index, 1);\n        }\n    }\n\n    statusChanged() {\n        return this.$statusChange.asObservable();\n    }\n\n    ngOnDestroy(): void {\n        this.$statusChange.complete();\n        this.$statusChange = null;\n    }\n}\n\n\nexport interface ThyTreeFormatEmitEvent {\n    eventName: string;\n    node: ThyTreeNode;\n    event?: MouseEvent | DragEvent;\n}\n"]}