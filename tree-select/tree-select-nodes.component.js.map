{"version":3,"file":"tree-select-nodes.component.js","sourceRoot":"","sources":["../../.tmp/tree-select/tree-select-nodes.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ThyTreeSelectComponent } from './tree-select.component';\nimport { ThyTreeSelectNode } from './tree-select.class';\n\n@Component({\n    selector: 'thy-tree-select-nodes',\n    template: \"<div class=\\\"thy-select-container h-100 bg-white\\\"> <div class=\\\"thy-select-custom-options thy-tree-select-pop h-100\\\"> <ng-container *ngIf=\\\"treeNodes?.length > 0\\\" [ngTemplateOutlet]=\\\"treeSelectNode\\\" [ngTemplateOutletContext]=\\\"{$implicit:treeNodes}\\\"></ng-container> <div class=\\\"thy-tree-select-pop-empty text-muted\\\" *ngIf=\\\"treeNodes?.length == 0\\\">{{parent.thyEmptyOptionsText}}</div> </div> </div> <ng-template #treeSelectNode let-nodes> <div class=\\\"thy-tree-select-node\\\"> <ng-container *ngFor=\\\"let node of nodes\\\"> <a class=\\\"thy-option-item\\\" [ngClass]=\\\"{'active': treeNodeIsSelected(node)}\\\" [class.disabled]=\\\"treeNodeIsDisable(node)\\\" [ngStyle]=\\\"{'padding-left.px':10*node.level+5}\\\" (click)=\\\"selectTreeNode($event,node)\\\" *ngIf=\\\"!treeNodeIsHidden(node)\\\"> <span class=\\\"expand-tree-icon text-info\\\" [class.invisible]=\\\"!(node.children?.length > 0 || node[childCountKey] && node[childCountKey] > 0)\\\" (click)=\\\"nodeExpandToggle($event,node)\\\"> <i class=\\\"wtf wtf-caret-down\\\" [class.rotate-caret]=\\\"!treeNodeIsExpand(node)\\\"></i> </span> <span class=\\\"ml-1\\\">{{node[showKey]}}</span> <span class=\\\"text-light checked-icon\\\"> <i class=\\\"wtf wtf-checked\\\"></i> </span> </a> <ng-container *ngIf=\\\"treeNodeIsExpand(node) && node.children?.length > 0\\\" [ngTemplateOutlet]=\\\"treeSelectNode\\\" [ngTemplateOutletContext]=\\\"{$implicit:node.children}\\\"></ng-container> </ng-container> </div> </ng-template> <!-- <div class=\\\"thy-select-container\\\"> <div class=\\\"thy-select-custom-options thy-tree-select-pop\\\"> <ng-container *ngIf=\\\"treeNodes?.length > 0\\\" [ngTemplateOutlet]=\\\"nodes\\\"></ng-container> <div class=\\\"thy-tree-select-pop-empty text-muted\\\" *ngIf=\\\"treeNodes?.length == 0\\\">{{parent.thyEmptyOptionsText}}</div> </div> </div> <ng-template #nodes> <thy-selection-list [thyMultiple]=\\\"isMultiple\\\" thyBindKeyEventContainer=\\\"body\\\" [thyUniqueKey]=\\\"primaryKey\\\" (thySelectionChange)=\\\"selectTreeNode($event)\\\" [(ngModel)]=\\\"selectedValue\\\"> <ng-container [ngTemplateOutlet]=\\\"treeSelectNode\\\" [ngTemplateOutletContext]=\\\"{$implicit: treeNodes}\\\"></ng-container> </thy-selection-list> </ng-template> <ng-template #treeSelectNode let-nodes> <thy-list-option [thyValue]=\\\"valueIsObject ? node : node[primaryKey]\\\" [thyDisabled]=\\\"treeNodeIsDisable(node)\\\" *ngFor=\\\"let node of nodes\\\"> <a class=\\\"thy-option-item\\\" [ngStyle]=\\\"{'padding-left.px':10*node.level+5}\\\" *ngIf=\\\"!treeNodeIsHidden(node)\\\"> <span class=\\\"expand-tree-icon text-info hand\\\" [class.invisible]=\\\"!(node.children?.length > 0 || node.childCount && node.childCount > 0)\\\" (click)=\\\"nodeExpandToggle($event,node)\\\"> <i class=\\\"wtf wtf-caret-down\\\" [class.rotate-caret]=\\\"!treeNodeIsExpand(node)\\\"></i> </span> <span class=\\\"ml-1\\\">{{node[showKey]}}</span> <span class=\\\"text-light checked-icon\\\"> <i class=\\\"wtf wtf-checked\\\"></i> </span> </a> <ng-container *ngIf=\\\"treeNodeIsExpand(node) && node.children?.length > 0\\\" [ngTemplateOutlet]=\\\"treeSelectNode\\\" [ngTemplateOutletContext]=\\\"{$implicit:node.children}\\\"></ng-container> </thy-list-option> </ng-template> {{selectedValue | json}} --> \"\n})\nexport class ThyTreeSelectNodesComponent implements OnInit {\n\n    public treeNodes = this.parent.treeNodes;\n\n    public primaryKey = this.parent.thyPrimaryKey;\n\n    public showKey = this.parent.thyShowKey;\n\n    public isMultiple = this.parent.thyMultiple;\n\n    public valueIsObject = this.parent.valueIsObject;\n\n    public selectedValue = this.parent.selectedValue;\n\n    public childCountKey = this.parent.thyChildCountKey;\n\n    constructor(\n        public parent: ThyTreeSelectComponent,\n    ) { }\n\n    ngOnInit() { }\n\n    treeNodeIsSelected(node: ThyTreeSelectNode) {\n        if (this.parent.thyMultiple) {\n            return (this.parent.selectedNodes || []).find(item => {\n                return item[this.primaryKey] === node[this.primaryKey];\n            });\n        } else {\n            return this.parent.selectedNode && this.parent.selectedNode[this.primaryKey] === node[this.primaryKey];\n        }\n    }\n\n    treeNodeIsHidden(node: ThyTreeSelectNode) {\n        if (this.parent.thyHiddenNodeKey) {\n            return node[this.parent.thyHiddenNodeKey];\n        }\n        if (this.parent.thyHiddenNodeFn) {\n            return this.parent.thyHiddenNodeFn(node);\n        }\n        return false;\n    }\n\n    treeNodeIsDisable(node: ThyTreeSelectNode) {\n        if (this.parent.thyDisableNodeKey) {\n            return node[this.parent.thyDisableNodeKey];\n        }\n        if (this.parent.thyDisableNodeFn) {\n            return this.parent.thyDisableNodeFn(node);\n        }\n        return false;\n    }\n\n    treeNodeIsExpand(node: ThyTreeSelectNode) {\n        let isSelectedNodeParent = false;\n        if (this.parent.thyMultiple) {\n            isSelectedNodeParent = !!(this.parent.selectedNodes || []).find(item => {\n                return item.parentValues.indexOf(node[this.primaryKey]) > -1;\n            });\n        } else {\n            isSelectedNodeParent = this.parent.selectedNode ?\n                this.parent.selectedNode.parentValues.indexOf(node[this.primaryKey]) > -1 : false;\n        }\n        return node.expand || (Object.keys(node)).indexOf('expand') < 0 && isSelectedNodeParent;\n    }\n\n    getNodeChildren(node: ThyTreeSelectNode) {\n        this.parent.getNodeChildren(node);\n    }\n\n    selectTreeNode(event: Event, node: ThyTreeSelectNode) {\n        event.stopPropagation();\n        if (this.treeNodeIsDisable(node)) {\n            return;\n        }\n        this.parent.selectNode(node);\n    }\n\n    nodeExpandToggle(event: Event, node: ThyTreeSelectNode) {\n        event.stopPropagation();\n        if (Object.keys(node).indexOf('expand') > -1) {\n            node.expand = !node.expand;\n        } else {\n            if (this.treeNodeIsExpand(node)) {\n                node.expand = false;\n            } else {\n                node.expand = true;\n            }\n        }\n\n        if (node.expand && this.parent.thyAsyncNode) {\n            this.getNodeChildren(node);\n        }\n    }\n\n}\n"]}