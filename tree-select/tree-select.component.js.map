{"version":3,"file":"tree-select.component.js","sourceRoot":"","sources":["../../.tmp/tree-select/tree-select.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Input,\n    OnInit,\n    forwardRef,\n    HostBinding,\n    ContentChild,\n    TemplateRef,\n    ElementRef,\n    ViewChild,\n    NgZone,\n    HostListener,\n    InjectionToken,\n    Inject,\n    Renderer2,\n    AfterViewInit\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ThyTreeSelectNode } from './tree-select.class';\nimport { isObject, isArray } from '../util/helpers';\nimport { Observable, of } from 'rxjs';\nimport {\n    CdkOverlayOrigin,\n    ConnectedOverlayPositionChange,\n    ScrollStrategy,\n    Overlay,\n    ScrollDispatcher,\n    CdkScrollable,\n    CdkConnectedOverlay,\n    ConnectionPositionPair\n} from '@angular/cdk/overlay';\nimport { DEFAULT_4_POSITIONS, DEFAULT_DROPDOWN_POSITIONS, EXPANDED_DROPDOWN_POSITIONS } from '../core/overlay/overlay-opsition-map';\nimport { ThyTreeNode } from '../tree/tree.class';\n\nimport { $ } from '../typings';\n\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('MAT_SELECT_SCROLL_STRATEGY');\n\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): ScrollStrategy {\n    return overlay.scrollStrategies.reposition();\n}\n\ntype InputSize = 'xs' | 'sm' | 'md' | 'lg' | '';\n\n@Component({\n    selector: 'thy-tree-select',\n    template: \"<div cdkOverlayOrigin #origin=\\\"cdkOverlayOrigin\\\" class=\\\"form-control form-control-custom\\\" [class.thy-select-selection]=\\\"!thyMultiple\\\" [ngClass]=\\\"thySize ? 'form-control-' + thySize : ''\\\" [class.disabled]=\\\"thyDisable\\\" (click)=\\\"openSelectPop()\\\"> <div *ngIf=\\\"!thyMultiple\\\" class=\\\"thy-tree-select-selection-text\\\"> <span *ngIf=\\\"selectedNode && !thyTreeSelectTriggerDisplayRef\\\">{{getShowNodeName()}}</span> <ng-container *ngIf=\\\"selectedNode && thyTreeSelectTriggerDisplayRef\\\" [ngTemplateOutlet]=\\\"thyTreeSelectTriggerDisplayRef\\\" [ngTemplateOutletContext]=\\\"{$implicit:selectedNode}\\\"></ng-container> <span class=\\\"text-placeholder d-inline-block\\\" *ngIf=\\\"!selectedNode\\\">{{thyPlaceholder}}</span> <a class=\\\"thy-select-remove remove-link\\\" href=\\\"javascript:;\\\" (click)=\\\"clearSelectedValue($event)\\\" *ngIf=\\\"selectedNode && thyAllowClear\\\"> <i class=\\\"wtf wtf-times-circle\\\"></i> </a> </div> <div *ngIf=\\\"thyMultiple\\\" [ngClass]=\\\"{'multiple-value-wrapper': selectedNodes?.length > 0}\\\"> <span class=\\\"mr-1\\\" [hidden]=\\\"selectedNodes?.length === 0\\\" *ngFor=\\\"let node of selectedNodes;index as i\\\" thyLabel=\\\"default\\\" [thyAfterIcon]=\\\"'wtf-times'\\\" (click)=\\\"removeSelectedNode(node,$event)\\\">{{node[thyShowKey]}} </span> <span class=\\\"text-placeholder\\\" *ngIf=\\\"selectedNodes?.length == 0\\\">{{thyPlaceholder}}</span> </div> </div> <ng-template cdkConnectedOverlay [cdkConnectedOverlayHasBackdrop]=\\\"false\\\" [cdkConnectedOverlayPositions]=\\\"positions\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayWidth]=\\\"cdkConnectOverlayWidth\\\" [cdkConnectedOverlayMinHeight]=\\\"100\\\" [cdkConnectedOverlayHeight]=\\\"250\\\" [cdkConnectedOverlayOpen]=\\\"expandTreeSelectOptions\\\" (backdropClick)=\\\"close()\\\" (detach)=\\\"close();\\\"> <div class=\\\"thy-select-custom\\\"> <thy-tree-select-nodes class=\\\"thy-select-container-wrapper h-100\\\"></thy-tree-select-nodes> </div> </ng-template> <!-- <div (click)=\\\"openSelectPop($event)\\\" class=\\\"form-control form-control-custom\\\" [class.thy-select-selection]=\\\"!thyMultiple\\\" [ngClass]=\\\"thySize ? 'form-control-' + thySize : ''\\\" [class.disabled]=\\\"thyDisable\\\"> <ng-container *ngIf=\\\"!thyMultiple\\\"> <span *ngIf=\\\"selectedNode && !thyTreeSelectTriggerDisplayRef\\\">{{selectedNode[thyShowKey]}}</span> <ng-container *ngIf=\\\"selectedNode && thyTreeSelectTriggerDisplayRef\\\" [ngTemplateOutlet]=\\\"thyTreeSelectTriggerDisplayRef\\\" [ngTemplateOutletContext]=\\\"{$implicit:selectedNode}\\\"></ng-container> <span class=\\\"text-placeholder d-inline-block\\\" *ngIf=\\\"!selectedNode\\\">{{thyPlaceholder}}</span> <a class=\\\"thy-select-remove remove-link\\\" href=\\\"javascript:;\\\" (click)=\\\"clearSelectedValue($event)\\\" *ngIf=\\\"selectedNode && thyAllowClear\\\"> <i class=\\\"wtf wtf-times-circle\\\"></i> </a> </ng-container> <div *ngIf=\\\"thyMultiple\\\" [ngClass]=\\\"{'multiple-value-wrapper': selectedNodes?.length > 0}\\\"> <span class=\\\"mr-1\\\" [hidden]=\\\"selectedNodes?.length === 0\\\" *ngFor=\\\"let node of selectedNodes;index as i\\\" thyLabel=\\\"default\\\" [thyAfterIcon]=\\\"'wtf-times'\\\" (click)=\\\"removeSelectedNode(node,$event)\\\">{{node[thyShowKey]}} </span> <span class=\\\"text-placeholder\\\" *ngIf=\\\"selectedNodes?.length == 0\\\">{{thyPlaceholder}}</span> </div> </div> <thy-tree-select-nodes class=\\\"thy-select-container-wrapper\\\" *ngIf=\\\"expandTreeSelectOptions\\\"></thy-tree-select-nodes> --> \",\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ThyTreeSelectComponent),\n            multi: true\n        }\n        // {\n        //     provide: MAT_SELECT_SCROLL_STRATEGY,\n        //     deps: [Overlay],\n        //     useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n        // }\n    ]\n})\nexport class ThyTreeSelectComponent implements OnInit, ControlValueAccessor {\n    @HostBinding('class.thy-select-custom') treeSelectClass = true;\n\n    @HostBinding('class.thy-select') isTreeSelect = true;\n\n    // 菜单是否展开\n    @HostBinding('class.menu-is-opened') expandTreeSelectOptions = true;\n\n    @HostBinding('class.thy-select-custom--multiple') isMulti = false;\n\n    public treeNodes: ThyTreeSelectNode[];\n\n    public selectedValue: any;\n\n    public selectedNode: ThyTreeSelectNode;\n\n    public selectedNodes: ThyTreeSelectNode[];\n\n    public flattenTreeNodes: ThyTreeSelectNode[] = [];\n\n    public cdkConnectOverlayWidth = 0;\n\n    // public scrollStrategy: ScrollStrategy;\n\n    public positions: ConnectionPositionPair[] = [...EXPANDED_DROPDOWN_POSITIONS];\n\n    private isInit = true;\n\n    public valueIsObject = false;\n\n    private parentNodes: any;\n\n    private cdkScrollables: CdkScrollable[] = [];\n\n    @ContentChild('thyTreeSelectTriggerDisplay')\n    thyTreeSelectTriggerDisplayRef: TemplateRef<any>;\n\n    @ViewChild(CdkOverlayOrigin) cdkOverlayOrigin: CdkOverlayOrigin;\n\n    @ViewChild(CdkConnectedOverlay) cdkConnectedOverlay: CdkConnectedOverlay;\n\n    @Input()\n    set thyTreeNodes(value: ThyTreeSelectNode[]) {\n        this.treeNodes = value;\n        if (!this.isInit && this.treeNodes && this.treeNodes.length > 0) {\n            this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);\n            this._dataLoadingDoneFn();\n        }\n    }\n\n    @Input() thyPrimaryKey = '_id';\n\n    @Input() thyShowKey = 'name';\n\n    @Input() thyChildCountKey = 'childCount';\n\n    @Input() thyAllowClear: boolean;\n\n    @Input() thyMultiple = false;\n\n    @Input() thyDisable = false;\n\n    @Input() thyPlaceholder = '请选择节点';\n\n    @Input() thySize: InputSize;\n\n    @Input() thyEmptyOptionsText = '暂时没有数据可选';\n\n    @Input() thyHiddenNodeKey = 'hidden';\n\n    @Input() thyDisableNodeKey = 'disabled';\n\n    @Input() thyAsyncNode = false;\n\n    @Input() thyShowWholeName = false;\n\n    @Input() thyHiddenNodeFn: (node: ThyTreeSelectNode) => boolean = (node: ThyTreeSelectNode) => node.hidden;\n\n    @Input() thyDisableNodeFn: (node: ThyTreeSelectNode) => boolean = (node: ThyTreeSelectNode) => node.disable;\n\n    @Input() thyGetNodeChildren: (node: ThyTreeSelectNode) => Observable<ThyTreeSelectNode> = (node: ThyTreeSelectNode) => of([]);\n\n    // TODO: 是否可以取消选中的node\n    // @Input() thyUnRemoveSelectedNodeFn: Function;\n\n    public onModelChange: Function = () => {};\n\n    public onModelTouch: Function = () => {};\n\n    private _getNgModelType() {\n        if (this.thyMultiple) {\n            this.valueIsObject = this.selectedValue[0] && isObject(this.selectedValue[0]);\n        } else {\n            this.valueIsObject = isObject(this.selectedValue);\n        }\n    }\n\n    writeValue(value: any): void {\n        this.selectedValue = value;\n        if (this.isInit) {\n            this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes);\n            this.isInit = false;\n        }\n        if (value) {\n            this._getNgModelType();\n            this._dataLoadingDoneFn();\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onModelTouch = fn;\n    }\n\n    constructor(\n        public elementRef: ElementRef,\n        public renderer: Renderer2,\n        private ngZone: NgZone,\n        private overlay: Overlay,\n        // @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategy: any,\n        private scrollDispatcher: ScrollDispatcher\n    ) {\n        // this.scrollStrategy = this.overlay.scrollStrategies.reposition();\n    }\n\n    @HostListener('document:click', ['$event'])\n    onDocumentClick(event: Event) {\n        event.stopPropagation();\n        if (!this.elementRef.nativeElement.contains(event.target) && this.expandTreeSelectOptions) {\n            this.expandTreeSelectOptions = false;\n            this.deregisterInScrollDispatcher();\n        }\n    }\n\n    ngOnInit() {\n        this.isMulti = this.thyMultiple;\n        this.expandTreeSelectOptions = false;\n        this.init();\n    }\n\n    private init() {\n        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;\n    }\n\n    private registerInScrollDispatcher() {\n        this.parentNodes = $(this.elementRef.nativeElement).parents();\n        for (let i = 0; i < this.parentNodes.length; i++) {\n            if (this.parentNodes[i]) {\n                if (this.parentNodes[i].scrollHeight > this.parentNodes[i].clientHeight) {\n                    const cdkScrollable: CdkScrollable = new CdkScrollable(\n                        { nativeElement: this.parentNodes[i] },\n                        this.scrollDispatcher,\n                        this.ngZone\n                    );\n                    this.cdkScrollables.push(cdkScrollable);\n                    this.scrollDispatcher.register(cdkScrollable);\n                }\n            }\n        }\n    }\n\n    private deregisterInScrollDispatcher() {\n        for (let i = 0; i < this.cdkScrollables.length; i++) {\n            this.scrollDispatcher.deregister(this.cdkScrollables[i]);\n        }\n    }\n\n    private flattenNodes(\n        nodes: ThyTreeSelectNode[] = [],\n        resultNodes: ThyTreeSelectNode[] = [],\n        parentPrimaryValue: string[] = []\n    ): ThyTreeSelectNode[] {\n        resultNodes = resultNodes.concat(nodes);\n        let nodesLeafs: ThyTreeSelectNode[] = [];\n        (nodes || []).forEach(item => {\n            item.parentValues = parentPrimaryValue;\n            item.level = item.parentValues.length;\n            if (item.children && isArray(item.children)) {\n                const nodeLeafs = this.flattenNodes(item.children, resultNodes, [...parentPrimaryValue, item[this.thyPrimaryKey]]);\n                nodesLeafs = [...nodesLeafs, ...nodeLeafs];\n            }\n        });\n        return [...nodes, ...nodesLeafs];\n    }\n\n    private _findTreeNode(value: string): ThyTreeSelectNode {\n        return (this.flattenTreeNodes || []).find(item => item[this.thyPrimaryKey] === value);\n    }\n\n    getShowNodeName() {\n        if (this.thyShowWholeName) {\n            let wholeName = '';\n            (this.selectedNode.parentValues || []).forEach((item: string, index: number) => {\n                const node = this._findTreeNode(item);\n                wholeName = `${wholeName}${node[this.thyShowKey]} > `;\n            });\n            return `${wholeName}${this.selectedNode[this.thyShowKey]}`;\n        } else {\n            return this.selectedNode[this.thyShowKey];\n        }\n    }\n\n    private _dataLoadingDoneFn() {\n        if (this.selectedValue) {\n            // 多选数据初始化\n            if (this.thyMultiple) {\n                if (this.selectedValue.length > 0) {\n                    if (this.valueIsObject && this.selectedValue[0].keys().includes(this.thyPrimaryKey)) {\n                        this.selectedNodes = this.selectedValue.map((item: any) => {\n                            return this._findTreeNode(item[this.thyPrimaryKey]);\n                        });\n                    } else {\n                        this.selectedNodes = this.selectedValue.map((item: any) => {\n                            return this._findTreeNode(item);\n                        });\n                    }\n                }\n            } else {\n                // 单选数据初始化\n                if (this.valueIsObject) {\n                    if (this.selectedValue.keys().includes(this.thyPrimaryKey)) {\n                        this.selectedNode = this._findTreeNode(this.selectedValue[this.thyPrimaryKey]);\n                    }\n                } else {\n                    this.selectedNode = this._findTreeNode(this.selectedValue);\n                }\n            }\n        }\n    }\n\n    openSelectPop() {\n        if (this.thyDisable) {\n            return;\n        }\n        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;\n        this.expandTreeSelectOptions = !this.expandTreeSelectOptions;\n        if (this.expandTreeSelectOptions) {\n            this.registerInScrollDispatcher();\n        }\n    }\n\n    close() {\n        this.expandTreeSelectOptions = false;\n        this.deregisterInScrollDispatcher();\n    }\n\n    // 单选 thyMultiple = false 时，清除数据时调用\n    clearSelectedValue(event: Event) {\n        event.stopPropagation();\n        this.selectedValue = null;\n        this.selectedNode = null;\n        this.onModelChange(this.selectedValue);\n    }\n\n    private _changeSelectValue() {\n        if (this.valueIsObject) {\n            this.selectedValue = this.thyMultiple ? this.selectedNodes : this.selectedNode;\n        } else {\n            this.selectedValue = this.thyMultiple\n                ? this.selectedNodes.map(item => item[this.thyPrimaryKey])\n                : this.selectedNode[this.thyPrimaryKey];\n        }\n        this.onModelChange(this.selectedValue);\n    }\n\n    // thyMultiple = true 时，移除数据时调用\n    removeSelectedNode(node: ThyTreeSelectNode, event?: Event) {\n        if (event) {\n            event.stopPropagation();\n        }\n        if (this.thyDisable) {\n            return;\n        }\n        if (this.thyMultiple) {\n            this.selectedNodes = this.selectedNodes.filter(item => {\n                return item[this.thyPrimaryKey] !== node[this.thyPrimaryKey];\n            });\n            this._changeSelectValue();\n        }\n    }\n\n    selectNode(node: ThyTreeSelectNode) {\n        if (!this.thyMultiple) {\n            this.selectedNode = node;\n            this.expandTreeSelectOptions = false;\n            this.deregisterInScrollDispatcher();\n        } else {\n            if (\n                this.selectedNodes.find(item => {\n                    return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];\n                })\n            ) {\n                this.removeSelectedNode(node);\n            } else {\n                this.selectedNodes.push(node);\n            }\n        }\n        this._changeSelectValue();\n    }\n\n    getNodeChildren(node: ThyTreeSelectNode) {\n        const result = this.thyGetNodeChildren(node);\n        if (result && result.subscribe) {\n            result.pipe().subscribe((data: ThyTreeSelectNode[]) => {\n                const nodes = this.flattenNodes(data, this.flattenTreeNodes, [...node.parentValues, node[this.thyPrimaryKey]]);\n                const otherNodes = nodes.filter((item: ThyTreeNode) => {\n                    return !this.flattenTreeNodes.find(hasItem => {\n                        return hasItem[this.thyPrimaryKey] === item[this.thyPrimaryKey];\n                    });\n                });\n                this.flattenTreeNodes = [...this.flattenTreeNodes, ...otherNodes];\n                node.children = data;\n            });\n        }\n    }\n}\n"]}