{"version":3,"file":"action.js","sourceRoot":"","sources":["../../.tmp/store/action.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,0BAA0B,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,EAAE,UAAU,EAAkB,MAAM,MAAM,CAAC;AAClD,OAAO,EAAO,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAO7C;;GAEG;AACH,MAAM,UAAU,MAAM,CAAC,MAAwC;IAC3D,OAAO,UACH,MAAW,EACX,IAAY,EACZ,UAAwC;QAExC,IAAM,IAAI,GAAG,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAEhD,2CAA2C;QAC3C,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG;gBACL,IAAI,EAAE,IAAI;aACb,CAAC;SACL;QACD,0BAA0B;QAC1B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC5B,MAAM,GAAG;gBACL,IAAI,EAAE,MAAM;aACf,CAAC;SACL;QACD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QAEzB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CACX,YAAU,MAAM,CAAC,IAAI,2CAAsC,CAC9D,CAAC;SACL;QAED,IAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG;YACjB,EAAE,EAAE,IAAI;YACR,UAAU,EAAE,UAAU;YACtB,IAAI,MAAA;SACP,CAAC;QAEF,UAAU,CAAC,KAAK,GAAG;YAAU,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACvC,WAAW,CAAC,YAAY,CAAI,MAAM,CAAC,WAAW,CAAC,IAAI,SAAI,IAAM,CAAC,CAAC;YAC/D,IAAI,MAAM,GAAG,UAAU,CAAC,IAAI,OAAf,UAAU,GAAM,IAAI,SAAK,IAAI,GAAE,IAAI,CAAC,QAAQ,GAAC,CAAC;YAC3D,IAAI,MAAM,YAAY,UAAU,EAAE;gBAC9B,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;gBACpC,MAAM,CAAC,SAAS,EAAE,CAAC;aACtB;YACD,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC;IACN,CAAC,CAAC;AACN,CAAC","sourcesContent":["import { META_KEY } from './types';\nimport { findAndCreateStoreMetadata } from './util';\nimport { Observable, from, Observer } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { ActionState } from './action-state';\n\nexport interface DecoratorActionOptions {\n    type: string;\n    payload?: any;\n}\n\n/**\n * Decorates a method with a action information.\n */\nexport function Action(action?: DecoratorActionOptions | string) {\n    return function(\n        target: any,\n        name: string,\n        descriptor: TypedPropertyDescriptor<any>\n    ) {\n        const meta = findAndCreateStoreMetadata(target);\n\n        // default use function name as action type\n        if (!action) {\n            action = {\n                type: name\n            };\n        }\n        // support string for type\n        if (typeof action === 'string') {\n            action = {\n                type: action\n            };\n        }\n        const type = action.type;\n\n        if (!action.type) {\n            throw new Error(\n                `Action ${action.type} is missing a static \"type\" property`\n            );\n        }\n\n        const originalFn = descriptor.value;\n        meta.actions[type] = {\n            fn: name,\n            originalFn: originalFn,\n            type\n        };\n\n        descriptor.value = function (...args: any[]) {\n            ActionState.changeAction(`${target.constructor.name}-${name}`);\n            let result = originalFn.call(this, ...args, this.snapshot);\n            if (result instanceof Observable) {\n                result = result.pipe(shareReplay());\n                result.subscribe();\n            }\n            return result;\n        };\n    };\n}\n"]}