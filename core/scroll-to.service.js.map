{"version":3,"file":"scroll-to.service.js","sourceRoot":"","sources":["../../.tmp/core/scroll-to.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,SAAS,CAAC;AAE9B;IAAA;IA8BA,CAAC;IA7BU,sCAAsB,GAA7B,UAA8B,aAA0B,EAAE,gBAA6B;QACnF,IAAM,eAAe,GAAG,GAAG,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QAC/D,IAAM,YAAY,GAAG,GAAG,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACzD,6BAA6B;QAC7B,IAAM,SAAS,GAAG,eAAe,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC;QACzD,6BAA6B;QAC7B,IAAM,YAAY,GAAG,YAAY,CAAC,GAAG,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,eAAe,CAAC,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QAC7G,yCAAyC;QACzC,IAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;QACvC,IAAI,SAAS,GAAG,CAAC,EAAE;YACf,gBAAgB,CAAC,SAAS,GAAG,gBAAgB,CAAC,SAAS,GAAG,SAAS,GAAG,UAAU,CAAC;SACpF;aAAM,IAAI,YAAY,GAAG,CAAC,EAAE;YACzB,gBAAgB,CAAC,SAAS,GAAG,gBAAgB,CAAC,SAAS,GAAG,YAAY,GAAG,UAAU,CAAC;SACvF;IACL,CAAC;IACM,+BAAe,GAAtB,UAAuB,aAA0B,EAAE,gBAA6B;QAC5E,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,sBAAsB,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAC7D,sCAAsC;YACtC,qCAAqC;YACrC,8BAA8B;YAC9B,0BAA0B;YAC1B,UAAU;YACV,WAAW;YACX,oEAAoE;YACpE,IAAI;SACP;IAEL,CAAC;IACL,sBAAC;AAAD,CAAC,AA9BD,IA8BC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { dom } from '../util';\n\nexport class ScrollToService {\n    static _customScrollToElement(targetElement: HTMLElement, containerElement: HTMLElement) {\n        const containerOffset = dom.getElementOffset(containerElement);\n        const targetOffset = dom.getElementOffset(targetElement);\n        // 选择项在顶部隐藏的偏移量 > 0 表示被顶部遮住隐藏\n        const topOffset = containerOffset.top - targetOffset.top;\n        // 选择项在底部隐藏的偏移量 > 0 表示被底部遮住隐藏\n        const bottomOffset = targetOffset.top + targetOffset.height - (containerOffset.top + containerOffset.height);\n        // 隐藏后滚动展示 targetElement 的偏移量，避免紧挨着头部或者底部\n        const viewOffset = targetOffset.height;\n        if (topOffset > 0) {\n            containerElement.scrollTop = containerElement.scrollTop - topOffset - viewOffset;\n        } else if (bottomOffset > 0) {\n            containerElement.scrollTop = containerElement.scrollTop + bottomOffset + viewOffset;\n        }\n    }\n    static scrollToElement(targetElement: HTMLElement, containerElement: HTMLElement) {\n        if (targetElement) {\n            this._customScrollToElement(targetElement, containerElement);\n            // if (targetElement.scrollIntoView) {\n            //     targetElement.scrollIntoView({\n            //         behavior: 'smooth',\n            //         block: 'center'\n            //     });\n            // } else {\n            //     this._customScrollToElement(targetElement, containerElement);\n            // }\n        }\n\n    }\n}\n"]}