{"version":3,"file":"store.js","sourceRoot":"","sources":["../../.tmp/store/store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Observer, BehaviorSubject, from, of, PartialObserver, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';\nimport { META_KEY, StoreMetaInfo } from './types';\nimport { helpers } from '../util';\nimport { RootStore } from './root-store';\nimport { OnDestroy, isDevMode } from '@angular/core';\nimport { ActionState } from './action-state';\n\ninterface Action {\n    type: string;\n    payload?: any;\n}\n\nexport class Store<T extends object> implements Observer<T>, OnDestroy {\n    public state$: BehaviorSubject<T>;\n\n    public apply_redux_tool = isDevMode();\n\n    private _defaultStoreInstanceId = `${this._getClassName()}`;\n\n    constructor(initialState: any) {\n        this.state$ = new BehaviorSubject<T>(initialState);\n        if (this.apply_redux_tool) {\n            const _rootStore: RootStore = RootStore.getSingletonRootStore();\n            ActionState.changeAction(`Add-${this._defaultStoreInstanceId}`);\n            _rootStore.registerStore(this);\n        }\n    }\n\n    get snapshot() {\n        return this.state$.getValue();\n    }\n\n    public dispatch(type: string, payload?: any): Observable<any> {\n        ActionState.changeAction(`${this._defaultStoreInstanceId}-${type}`);\n        const result = this._dispatch({\n            type: type,\n            payload: payload\n        });\n        result.subscribe();\n        return result;\n    }\n\n    private _dispatch(action: any): Observable<any> {\n        const meta = this[META_KEY] as StoreMetaInfo;\n        if (!meta) {\n            throw new Error(`${META_KEY} is not found, current store has not action`);\n        }\n        const actionMeta = meta.actions[action.type];\n        if (!actionMeta) {\n            throw new Error(`${action.type} is not found`);\n        }\n        // let result: any = this[actionMeta.fn](this.snapshot, action.payload);\n        let result: any = actionMeta.originalFn.call(this, this.snapshot, action.payload);\n\n        if (result instanceof Promise) {\n            result = from(result);\n        }\n\n        if (result instanceof Observable) {\n            result = result.pipe(map(r => r));\n        } else {\n            result = Observable.create((observer: Observer<any>) => {\n                observer.next({});\n            });\n            // result = of({});\n        }\n        return result.pipe(shareReplay());\n    }\n\n    select<TResult>(selector: (state: T) => TResult): Observable<TResult> | Observable<TResult>;\n    select(selector: string | any): Observable<any> {\n        return this.state$.pipe(\n            map(selector),\n            distinctUntilChanged()\n        );\n    }\n\n    next(state: T) {\n        this.state$.next(state);\n    }\n\n    error(error: any) {\n        this.state$.error(error);\n    }\n\n    complete() {\n        this.state$.complete();\n    }\n\n    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription {\n        return this.state$.subscribe(next, error, complete);\n    }\n\n    /**\n     * set store new state\n     *\n     * @example\n     * this.setState(newState);\n     * this.setState({ users: produce(this.snapshot.users).add(user) });\n     * this.setState((state) => {\n     *    return {\n     *        users: produce(state.users).add(user)\n     *    }\n     * });\n     * @param fn\n     */\n    setState(fn: Partial<T> | ((newState: T) => Partial<T>)): void {\n        if (helpers.isFunction(fn)) {\n            this.next({\n                ...this.snapshot,\n                ...(fn as any)(this.snapshot)\n            });\n        } else {\n            this.next({\n                ...this.snapshot,\n                ...(fn as T)\n            });\n        }\n    }\n\n    getState(): T {\n        return this.snapshot;\n    }\n\n    ngOnDestroy() {\n        if (this.apply_redux_tool) {\n            const _rootStore: RootStore = RootStore.getSingletonRootStore();\n            _rootStore.unregisterStore(this);\n        }\n    }\n\n    /**\n     * You can override this method if you want to give your container instance a custom id.\n     * The returned id must be unique in the application.\n     */\n    getStoreInstanceId(): string {\n        return this._defaultStoreInstanceId;\n    }\n\n    private _getClassName(): string {\n        const name = this.constructor.name;\n        if (this.apply_redux_tool) {\n            const _rootStore: RootStore = RootStore.getSingletonRootStore();\n            if (!_rootStore.existStoreInstanceId(name)) {\n                return name;\n            }\n            let j = 0;\n            for (let i = 1; i < 20; i++) {\n                if (!_rootStore.existStoreInstanceId(`${name}-${i}`)) {\n                    j = i;\n                    break;\n                }\n            }\n            return `${this.constructor.name}-${j}`;\n        }\n        return name;\n    }\n}\n"]}