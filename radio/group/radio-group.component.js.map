{"version":3,"file":"radio-group.component.js","sourceRoot":"","sources":["../../../.tmp/radio/group/radio-group.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    ElementRef,\n    OnInit,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ThyRadioComponent } from '../radio.component';\nimport { ThyRadioButtonComponent } from '../button/radio-button.component';\nimport { UpdateHostClassService } from '../../shared';\nimport { INHERITED_CLASS } from '@angular/core/src/reflection/reflection_capabilities';\nimport { inputValueToBoolean } from '../../util/helpers';\n\nconst buttonGroupSizeMap = {\n    sm: ['btn-group-sm'],\n    lg: ['btn-group-lg']\n};\n\nconst radioGroupLayoutMap = {\n    flex: ['radio-group-layout-flex']\n};\n\n@Component({\n    selector: 'thy-radio-group',\n    template: \"<ng-content></ng-content>\",\n    providers: [\n        UpdateHostClassService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ThyRadioGroupComponent),\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ThyRadioGroupComponent implements ControlValueAccessor, OnInit {\n    @HostBinding('class.thy-radio-group') thyRadioGroup = true;\n\n    @HostBinding('class.btn-group') isButtonGroup = false;\n\n    @HostBinding('class.btn-group-outline-default')\n    isButtonGroupOutline = false;\n    // @HostBinding('class.radio-group-layout-flex')\n    // isFullLayout = false;\n\n    private _size: string;\n\n    private _layout: string;\n\n    @Input()\n    set thySize(size: string) {\n        this._size = size;\n    }\n\n    @Input()\n    set thyLayout(layout: string) {\n        this._layout = layout;\n    }\n\n    _innerValue: string | number;\n\n    radios: Array<ThyRadioComponent | ThyRadioButtonComponent> = [];\n\n    @Input()\n    set thyDisabled(value: boolean) {\n        this.setDisabledState(value);\n    }\n\n    onChange: (_: string) => void = () => null;\n    onTouched: () => void = () => null;\n\n    constructor(\n        private updateHostClassService: UpdateHostClassService,\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        this.updateHostClassService.initializeElement(elementRef.nativeElement);\n    }\n\n    addRadio(radio: ThyRadioComponent | ThyRadioButtonComponent): void {\n        this.radios.push(radio);\n        radio.thyChecked = radio.thyValue === this._innerValue;\n    }\n\n    updateValue(value: string, emit: boolean): void {\n        this._innerValue = value;\n        this.radios.forEach(radio => {\n            radio.thyChecked = radio.thyValue === this._innerValue;\n        });\n        if (emit) {\n            this.onChange(value);\n        }\n        this.changeDetectorRef.detectChanges();\n    }\n\n    writeValue(value: any): void {\n        this.updateValue(value, false);\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        this.radios.forEach(radio => {\n            radio.setDisabledState(isDisabled);\n        });\n    }\n\n    setGroup() {\n        if (!this.isButtonGroup && !this.isButtonGroupOutline) {\n            this.isButtonGroup = true;\n            this.isButtonGroupOutline = true;\n        }\n    }\n\n    ngOnInit() {\n        this._setClasses();\n    }\n\n    private _setClasses() {\n        const classNames: string[] = [];\n        if (buttonGroupSizeMap[this._size]) {\n            classNames.push(buttonGroupSizeMap[this._size]);\n        }\n        if (radioGroupLayoutMap[this._layout]) {\n            classNames.push(radioGroupLayoutMap[this._layout]);\n        }\n        this.updateHostClassService.updateClass(classNames);\n    }\n}\n"]}