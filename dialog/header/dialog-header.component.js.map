{"version":3,"file":"dialog-header.component.js","sourceRoot":"","sources":["../../../.tmp/dialog/header/dialog-header.component.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EACH,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,YAAY,EACZ,WAAW,EAEX,WAAW,EAEX,QAAQ,EACR,UAAU,EACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,2BAA2B,EAAE,MAAM,+BAA+B,CAAC;AAE5E,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAQ5C;IAmBI,+BACY,UAAsB,EACtB,MAAiB,EACjB,SAAuB,EACX,eAA4C;QAHxD,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAW;QACjB,cAAS,GAAT,SAAS,CAAc;QACX,oBAAe,GAAf,eAAe,CAA6B;QAtBhC,oBAAe,GAAG,IAAI,CAAC;QAgBjD,eAAU,GAAwB,IAAI,YAAY,EAAS,CAAC;IAOnE,CAAC;IAfJ,sBAAI,yDAAsB;aAA1B,UAA2B,GAAW;YAClC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC/C;QACL,CAAC;;;OAAA;IAaD,wCAAQ,GAAR;QAAA,iBAoBC;QAnBG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACvB,iFAAiF;YACjF,kGAAkG;YAClG,kGAAkG;YAClG,oFAAoF;YACpF,mCAAmC;YACnC,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAC1C,IAAI,CAAC,UAAU,CAAC,aAAa,CACH,CAAC;YAC/B,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC;SACtD;QAED,mFAAmF;QACnF,8EAA8E;QAC9E,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YACnB,IAAI,KAAI,CAAC,eAAe,EAAE;gBACtB,KAAI,CAAC,eAAe,CAAC,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC;aACvD;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qCAAK,GAAL,UAAM,KAAa;QACf,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;SACvB;IACL,CAAC;IArDmC;QAAnC,WAAW,CAAC,qBAAqB,CAAC;;kEAAwB;IAG3D;QADC,YAAY,CAAC,cAAc,CAAC;kCACN,WAAW;iEAAM;IAE/B;QAAR,KAAK,EAAE;;2DAAkB;IAG1B;QADC,KAAK,EAAE;;;uEAKP;IAEQ;QAAR,KAAK,EAAE;;0DAAiB;IAEf;QAAT,MAAM,EAAE;kCAAa,YAAY;6DAAoC;IAjB7D,qBAAqB;QANjC,SAAS,CAAC;YACP,QAAQ,EAAE,mBAAmB;YAC7B,QAAQ,EAAE,oYAAoY;YAC9Y,mDAAmD;YACnD,QAAQ,EAAE,iBAAiB;SAC9B,CAAC;QAwBO,WAAA,QAAQ,EAAE,CAAA;yCAHS,UAAU;YACd,SAAS;YACN,YAAY;YACM,2BAA2B;OAvB3D,qBAAqB,CAuDjC;IAAD,4BAAC;CAAA,AAvDD,IAuDC;SAvDY,qBAAqB","sourcesContent":["import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ContentChild,\n    TemplateRef,\n    OnInit,\n    HostBinding,\n    ChangeDetectionStrategy,\n    Optional,\n    ElementRef\n} from '@angular/core';\nimport { ThyDialog } from '../dialog.service';\nimport { ThyDialogContainerComponent } from '../dialog-container.component';\nimport { ThyDialogRefInternal } from '../dialog-ref';\nimport { ThyTranslate } from '../../shared';\n\n@Component({\n    selector: 'thy-dialog-header',\n    template: \"<ng-container *ngIf=\\\"headerTemplate; else: defaultHeader\\\"> <template [ngTemplateOutlet]=\\\"headerTemplate\\\"></template> </ng-container> <ng-template #defaultHeader> <h3 class=\\\"modal-title\\\"> <i *ngIf=\\\"thyIcon\\\" class=\\\"{{thyIcon}}\\\"></i> {{ thyTitle }} </h3> <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"close($event)\\\"> <i class=\\\"wtf wtf-times\\\"></i> </button> </ng-template> \",\n    // changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'thyDialogHeader'\n})\nexport class DialogHeaderComponent implements OnInit {\n    @HostBinding(`class.dialog-header`) _isDialogHeader = true;\n\n    @ContentChild('dialogHeader')\n    public headerTemplate: TemplateRef<any>;\n\n    @Input() thyTitle: string;\n\n    @Input()\n    set thyTitleTranslationKey(key: string) {\n        if (key && !this.thyTitle) {\n            this.thyTitle = this.translate.instant(key);\n        }\n    }\n\n    @Input() thyIcon: string;\n\n    @Output() thyOnClose: EventEmitter<Event> = new EventEmitter<Event>();\n\n    constructor(\n        private elementRef: ElementRef,\n        private dialog: ThyDialog,\n        private translate: ThyTranslate,\n        @Optional() private dialogContainer: ThyDialogContainerComponent\n    ) {}\n\n    ngOnInit() {\n        if (!this.dialogContainer) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the ThyDialogContainerComponent isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the ThyDialogContainerComponent by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            const dialogRef = this.dialog.getClosestDialog(\n                this.elementRef.nativeElement\n            ) as ThyDialogRefInternal<any>;\n            this.dialogContainer = dialogRef.containerInstance;\n        }\n\n        // change in next microtask avoid throw ExpressionChangedAfterItHasBeenCheckedError\n        // because sub component change parent's HostBinding property (ariaLabelledBy)\n        Promise.resolve().then(() => {\n            if (this.dialogContainer) {\n                this.dialogContainer.ariaLabelledBy = this.thyTitle;\n            }\n        });\n    }\n\n    close(event?: Event) {\n        if (this.thyOnClose.observers.length > 0) {\n            this.thyOnClose.emit(event);\n        } else {\n            this.dialog.close();\n        }\n    }\n}\n"]}