{"version":3,"file":"time.component.js","sourceRoot":"","sources":["../../../.tmp/datepicker-next/time/time.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    OnInit,\n    HostBinding,\n    ElementRef,\n    ViewChild,\n    OnDestroy,\n    HostListener,\n    InjectionToken,\n    Injector\n} from '@angular/core';\nimport {\n    ComponentType,\n    Overlay,\n    OverlayRef,\n    OverlayConfig,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport {\n    TemplatePortal,\n    ComponentPortal,\n    PortalInjector\n} from '@angular/cdk/portal';\nimport { ThyDatepickerNextTimeSimplyComponent } from './time-simply.component';\nimport {\n    ThyDatepickerNextStore,\n    datepickerNextActions\n} from '../datepicker-next.store';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { getFullTimeText } from '../util';\nimport { ThyDatepickerNextTimeAccurateComponent } from './time-accurate.component';\nimport { DatepickerNextTimeModeType } from '../datepicker-next.interface';\n\nexport const CONTAINER_DATA = new InjectionToken<{}>('CONTAINER_DATA');\n\n@Component({\n    selector: 'thy-datepicker-next-time',\n    template: \"<div class=\\\"time-text\\\" *ngIf=\\\"!isEdit\\\" (click)=\\\"behaviorEdit()\\\"> <ng-container><i class=\\\"wtf wtf-timeline-o\\\"></i> 设置时间</ng-container> </div> <div *ngIf=\\\"isEdit\\\" #timeInput (click)=\\\"behaviorPopTimeSelect()\\\"> <input thyInput thySize=\\\"md\\\" name=\\\"time\\\" thyAutofocus [(ngModel)]=\\\"timeText\\\" (ngModelChange)=\\\"onTimeChange()\\\" placeholder=\\\"\\\"> </div> \"\n})\nexport class ThyDatepickerNextTimeComponent implements OnInit, OnDestroy {\n    @HostBinding('class') stylesClass = 'time-container';\n\n    @ViewChild('timeInput') timeInput: any;\n\n    overlayRef: OverlayRef;\n\n    isEdit = false;\n\n    timeText: string;\n\n    private _timeOverlayComponent: any = ThyDatepickerNextTimeSimplyComponent;\n\n    private ngUnsubscribe$ = new Subject();\n\n    constructor(\n        private injector: Injector,\n        private overlay: Overlay,\n        public store: ThyDatepickerNextStore\n    ) {}\n\n    ngOnInit() {\n        if (\n            this.store.snapshot.viewFeatureConfig.timeComponentType ===\n            DatepickerNextTimeModeType.accurate\n        ) {\n            this._timeOverlayComponent = ThyDatepickerNextTimeAccurateComponent;\n        }\n\n        this.store\n            .select(ThyDatepickerNextStore.timeSelected)\n            .pipe(takeUntil(this.ngUnsubscribe$))\n            .subscribe(n => {\n                this._combinationTimeText();\n                this._detachTimePop();\n                if (this.store.snapshot.timeSelected) {\n                    this.behaviorEdit();\n                }\n            });\n    }\n\n    private _combinationTimeText() {\n        const time = this.store.snapshot.timeSelected;\n        if (time) {\n            this.timeText = `${getFullTimeText(time.hour)}:${getFullTimeText(\n                time.minute\n            )}`;\n        }\n    }\n\n    behaviorEdit() {\n        this.isEdit = true;\n    }\n\n    behaviorPopTimeSelect() {\n        this._combinationOverlayRef();\n        if (!this._detachTimePop()) {\n            this.overlayRef.attach(\n                new ComponentPortal(\n                    this._timeOverlayComponent,\n                    null,\n                    this.createInjector({\n                        store: this.store\n                    })\n                )\n            );\n        }\n    }\n\n    createInjector(dataToPass: any): PortalInjector {\n        const injectorTokens = new WeakMap();\n        injectorTokens.set(CONTAINER_DATA, dataToPass);\n        return new PortalInjector(this.injector, injectorTokens);\n    }\n\n    private _combinationOverlayRef() {\n        if (this.overlayRef) {\n            return;\n        }\n        const strategy = this.overlay\n            .position()\n            .connectedTo(\n                this.timeInput,\n                { originX: 'start', originY: 'bottom' },\n                { overlayX: 'start', overlayY: 'top' }\n            );\n        this.overlayRef = this.overlay.create({\n            positionStrategy: strategy,\n            scrollStrategy: this.overlay.scrollStrategies.reposition()\n        });\n    }\n\n    private _detachTimePop(): boolean {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            return true;\n        }\n    }\n\n    onTimeChange() {\n        const time = this.timeText.trim();\n        const reg = /^[0-9]{2}:[0-9]{2}$/;\n        if (reg.test(time)) {\n            const timeArray: any = time.split(':');\n            this.store.dispatch(datepickerNextActions.changeTimeSelected, {\n                hour: timeArray[0] * 1,\n                minute: timeArray[1] * 1\n            });\n        } else if (time === '') {\n            this.store.dispatch(datepickerNextActions.changeTimeSelected);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n}\n"]}