{"version":3,"file":"form-validator.service.js","sourceRoot":"","sources":["../../.tmp/form/form-validator.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NgForm, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { helpers } from '../util';\nimport {\n    ThyFormValidatorLoader,\n    ERROR_VALUE_REPLACE_REGEX\n} from './form-validator-loader';\nimport { ThyFormValidatorConfig } from './form.class';\nimport { Dictionary } from '../typings';\n\n@Injectable()\nexport class ThyFormValidatorService {\n    private _ngForm: NgForm;\n\n    private _formElement: HTMLElement;\n\n    private _config: ThyFormValidatorConfig;\n\n    public errors: string[] = [];\n\n    // 记录所有元素的验证信息\n    public validations: Dictionary<{\n        hasError?: boolean;\n        errorMessages?: string[];\n    }> = {};\n\n    private _getElement(name: string) {\n        const element = this._formElement[name];\n        if (element) {\n            return element;\n        } else {\n            return this._formElement.querySelector(`[name='${name}']`);\n        }\n    }\n\n    private _clearElementError(name: string) {\n        if (this.validations[name] && this.validations[name].hasError) {\n            this.validations[name].hasError = false;\n            this.validations[name].errorMessages = [];\n            this.thyFormValidateLoader.removeError(this._getElement(name));\n        }\n    }\n\n    private _tryGetValidation(name: string) {\n        if (!this.validations[name]) {\n            this._initializeFormControlValidation(\n                name,\n                this._ngForm.controls[name]\n            );\n        }\n        return this.validations[name];\n    }\n\n    private _addError(message: string) {\n        this.errors.unshift(message);\n    }\n\n    private _clearErrors() {\n        this.errors = [];\n    }\n\n    private _initializeFormControlValidation(\n        name: string,\n        control: AbstractControl\n    ) {\n        this.validations[name] = {\n            hasError: false,\n            errorMessages: []\n        };\n        control.valueChanges.subscribe(() => {\n            this._clearElementError(name);\n            this._clearErrors();\n        });\n    }\n\n    private _restFormControlValidation(name: string) {\n        const validation = this.validations[name];\n        if (validation) {\n            validation.hasError = false;\n            validation.errorMessages = [];\n        }\n    }\n\n    private _formatValidationMessage(name: string, message: string) {\n        const control = this._ngForm.controls[name];\n        if (control) {\n            return message.replace(\n                ERROR_VALUE_REPLACE_REGEX,\n                (tag, key) => {\n                    if (key) {\n                        return (\n                            control.errors[key][key] ||\n                            control.errors[key].requiredLength\n                        );\n                    }\n                }\n            );\n        } else {\n            return message;\n        }\n    }\n\n    private _getValidationMessage(name: string, validationError: string) {\n        let message = null;\n        if (\n            this._config &&\n            this._config.validationMessages &&\n            this._config.validationMessages[name] &&\n            this._config.validationMessages[name][validationError]\n        ) {\n            message = this._config.validationMessages[name][validationError];\n        } else {\n            message = this.thyFormValidateLoader.getErrorMessage(\n                name,\n                validationError\n            );\n        }\n        return this._formatValidationMessage(name, message);\n    }\n\n    private _getValidationMessages(\n        name: string,\n        validationErrors: ValidationErrors\n    ) {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(\n                    this._getValidationMessage(name, validationError)\n                );\n            }\n        }\n        return messages;\n    }\n\n    _setControlValidationError(name: string, errorMessages: string[]) {\n        const validation = this._tryGetValidation(name);\n        validation.errorMessages = errorMessages;\n        validation.hasError = true;\n        this.thyFormValidateLoader.showError(\n            this._getElement(name),\n            errorMessages\n        );\n    }\n\n    constructor(private thyFormValidateLoader: ThyFormValidatorLoader) {}\n\n    initialize(ngForm: NgForm, formElement: HTMLElement) {\n        this._ngForm = ngForm;\n        this._formElement = formElement;\n    }\n\n    setValidatorConfig(config: ThyFormValidatorConfig) {\n        this._config = config;\n    }\n\n    validateControl(name: string) {\n        this._clearElementError(name);\n        const control = this._ngForm.controls[name];\n        if (control && control.invalid) {\n            const errorMessages = this._getValidationMessages(\n                name,\n                control.errors\n            );\n            this._setControlValidationError(name, errorMessages);\n        }\n    }\n\n    validateControls() {\n        // 主要是 无法检测到 ngForm 的 controls 的变化，或者是我没有找到\n        // 验证的时候循环 ngForm 的 controls 验证\n        // 发现没有 validation 初始化一个，已经存在不会重新初始化，保存缓存数据\n        for (const name in this._ngForm.controls) {\n            if (this._ngForm.controls.hasOwnProperty(name)) {\n                this._tryGetValidation(name);\n                this.validateControl(name);\n            }\n        }\n        // 移除已经不存在的 validation\n        const names = Object.keys(this.validations);\n        names.forEach(name => {\n            if (!this._ngForm.controls[name]) {\n                delete this.validations[name];\n            }\n        });\n    }\n\n    addError(message: string) {\n        this._addError(message);\n    }\n\n    validate($event?: Event): boolean {\n        this._ngForm.onSubmit($event);\n        this.validateControls();\n        return this._ngForm.valid;\n    }\n\n    reset() {\n        this._ngForm.reset();\n        for (const name in this.validations) {\n            if (this.validations.hasOwnProperty(name)) {\n                this._restFormControlValidation(name);\n                this._clearElementError(name);\n            }\n        }\n    }\n\n    setElementErrorMessage(name: string, message: string) {\n        this._clearElementError(name);\n        this._setControlValidationError(name, [message]);\n    }\n}\n"]}