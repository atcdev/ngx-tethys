{"version":3,"file":"tree-node.component.js","sourceRoot":"","sources":["../../.tmp/tree/tree-node.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    Input,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    Output,\n    EventEmitter,\n    NgZone,\n    ViewChildren,\n    AfterViewInit,\n    OnDestroy,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeData, ThyTreeNode } from './tree.class';\nimport { ThyTreeService } from './tree.service';\nimport { helpers } from '../util';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'thy-tree-node',\n    template: \"<div class=\\\"thy-tree-node-wrapper thy-sortable-item\\\" [class.active]=\\\"root.isSelected(node)\\\" (click)=\\\"clickNode($event)\\\"> <span *ngIf=\\\"thyDraggable\\\" class=\\\"thy-tree-drag-icon\\\"> <i class=\\\"wtf wtf wtf-move thy-sortable-handle\\\"></i> </span> <span class=\\\"thy-tree-expand\\\" (click)=\\\"expandNode($event)\\\"> <ng-container *ngIf=\\\"isShowExpand(node)\\\"> <i class=\\\"wtf thy-tree-expand-icon\\\" *ngIf=\\\"(node.children && node.children.length > 0) || thyAsync || emptyChildrenTemplateRef\\\" [class.narrow]=\\\"!node.isExpanded\\\" ></i> </ng-container> </span> <span class=\\\"thy-tree-node-content\\\"> <ng-container *ngIf=\\\"!templateRef\\\"> <ng-container *ngIf=\\\"nodeIcon\\\"> <span class=\\\"thy-tree-node-icon\\\"> <i [ngClass]=\\\"nodeIcon\\\" [ngStyle]=\\\"nodeIconStyle\\\"></i></span> </ng-container> <span [title]=\\\"node.title\\\" class=\\\"thy-tree-node-title\\\" [class.truncate]=\\\"thyTitleTruncate\\\">{{ node.title }}</span> </ng-container> <ng-container *ngIf=\\\"templateRef\\\"> <ng-template [ngTemplateOutlet]=\\\"templateRef\\\" [ngTemplateOutletContext]=\\\"{ $implicit: node, origin: node?.origin }\\\" ></ng-template> </ng-container> </span> </div> <div class=\\\"thy-tree-node-children\\\" *ngIf=\\\"isShowExpand(node) && node.isExpanded\\\" [sortablejs]=\\\"node.children\\\" [sortablejsOptions]=\\\"root.treeNodesSortableOptions\\\" [attr.node-key]=\\\"node.key\\\" > <ng-template *ngIf=\\\"node.children.length === 0 && !node.isLoading\\\" [ngTemplateOutlet]=\\\"emptyChildrenTemplateRef\\\" ></ng-template> <thy-tree-node *ngFor=\\\"let node of node.children; trackBy: root.trackByFn; let i = index\\\" [node]=\\\"node\\\" [templateRef]=\\\"templateRef\\\" [emptyChildrenTemplateRef]=\\\"emptyChildrenTemplateRef\\\" [thyAsync]=\\\"thyAsync\\\" [thyShowExpand]=\\\"thyShowExpand\\\" [thyMultiple]=\\\"thyMultiple\\\" [thyDraggable]=\\\"thyDraggable\\\" [thyTitleTruncate]=\\\"thyTitleTruncate\\\" (thyOnClick)=\\\"thyOnClick.emit($event)\\\" (thyOnExpandChange)=\\\"thyOnExpandChange.emit($event)\\\" > </thy-tree-node> <ng-container *ngIf=\\\"thyAsync\\\"> <thy-loading [thyDone]=\\\"!node.isLoading\\\"></thy-loading> </ng-container> </div> \",\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeNodeComponent implements OnDestroy {\n    @Input() node: ThyTreeNode;\n\n    @Input() thyAsync = false;\n\n    @Input() thyMultiple = false;\n\n    @Input() thyDraggable = false;\n\n    @Input() thyTitleTruncate = true;\n\n    @Input() templateRef: TemplateRef<any>;\n\n    @Input() emptyChildrenTemplateRef: TemplateRef<any>;\n\n    @Input()\n    set thyShowExpand(value: boolean | ((_: ThyTreeNodeData) => boolean)) {\n        this._showExpand = value;\n    }\n\n    get thyShowExpand() {\n        return this._showExpand;\n    }\n\n    @Output() thyOnClick: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() thyOnExpandChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @ContentChild('childrenTree') childrenTreeTemplateRef: TemplateRef<any>;\n\n    @ViewChild('title') titleInputElementRef: ElementRef<HTMLInputElement>;\n\n    @HostBinding('class.thy-tree-node') thyTreeNodeClass = true;\n\n    public get nodeIcon() {\n        return this.node.origin.icon;\n    }\n\n    public get nodeIconStyle() {\n        return this.node.origin.iconStyle;\n    }\n\n    private _showExpand: boolean | ((_: ThyTreeNodeData) => boolean);\n\n    destroy$ = new Subject();\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    constructor(\n        public root: ThyTreeComponent,\n        public thyTreeService: ThyTreeService,\n        private ngZone: NgZone,\n        private cdr: ChangeDetectorRef\n    ) {\n        this.thyTreeService\n            .statusChanged()\n            .pipe(\n                filter(data => data.node.key === this.node.key),\n                takeUntil(this.destroy$)\n            )\n            .subscribe(() => {\n                this.markForCheck();\n            });\n    }\n\n    public clickNode(event: Event) {\n        this.root.toggleTreeNode(this.node);\n        this.thyOnClick.emit({\n            eventName: 'click',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public expandNode(event: Event) {\n        event.stopPropagation();\n        this.node.setExpanded(!this.node.isExpanded);\n        if (this.node.isExpanded) {\n            this.thyOnExpandChange.emit({\n                eventName: 'expand',\n                event: event,\n                node: this.node\n            });\n            if (this.thyAsync && this.node.children.length === 0) {\n                this.node.setLoading(true);\n            }\n        }\n    }\n\n    public isShowExpand(node: ThyTreeNodeData) {\n        if (helpers.isFunction(this._showExpand)) {\n            return (this._showExpand as Function)(node);\n        } else {\n            return this._showExpand;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n"]}