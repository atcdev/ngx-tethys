import { OnInit, ChangeDetectorRef, EventEmitter, TemplateRef, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ConnectedOverlayPositionChange, ConnectionPositionPair } from '@angular/cdk/overlay';
import { UpdateHostClassService } from '../shared/update-host-class.service';
export declare type ThyCascaderTriggerType = 'click' | 'hover';
export declare type ThyCascaderExpandTrigger = 'click' | 'hover';
export interface CascaderOption {
    value?: any;
    label?: string;
    title?: string;
    disabled?: boolean;
    loading?: boolean;
    isLeaf?: boolean;
    parent?: CascaderOption;
    children?: CascaderOption[];
    [key: string]: any;
}
export declare class ThyCascaderComponent implements OnInit, ControlValueAccessor {
    private cdr;
    private elementRef;
    private updateHostClassService;
    private changeOnSelect;
    private showInput;
    prefixCls: string;
    private menuClassName;
    private columnClassName;
    private _menuColumnCls;
    private defaultValue;
    dropDownPosition: string;
    menuVisible: boolean;
    isLoading: boolean;
    isOpening: boolean;
    showSearch: boolean;
    private _thySize;
    private _arrowCls;
    private _menuCls;
    private _labelCls;
    private _clearCls;
    private _inputCls;
    private labelRenderTpl;
    isLabelRenderTemplate: boolean;
    labelRenderText: string;
    labelRenderContext: any;
    onChange: any;
    onTouched: any;
    private cascaderPositon;
    positions: ConnectionPositionPair[];
    thyLabelRender: TemplateRef<any>;
    private value;
    private selectedOptions;
    private activatedOptions;
    thyColumns: CascaderOption[][];
    thyValueProperty: string;
    thyLabelProperty: string;
    thyPlaceHolder: string;
    private _inputValue;
    inputValue: string;
    thyLoadData: (node: CascaderOption, index?: number) => PromiseLike<any>;
    thyChangeOnSelect: boolean;
    thyShowInput: boolean;
    searchWidthStyle: string;
    private oldColumnsHolder;
    private oldActivatedOptions;
    inSearch: boolean;
    thyTriggerAction: ThyCascaderTriggerType | ThyCascaderTriggerType[];
    thyExpandTriggerAction: ThyCascaderExpandTrigger | ThyCascaderExpandTrigger[];
    thyMenuStyle: {
        [key: string]: string;
    };
    thyOptions: CascaderOption[] | null;
    thyMenuClassName: string;
    thyColumnClassName: string;
    disabled: boolean;
    thySize: string;
    thyChange: EventEmitter<any[]>;
    thySelectionChange: EventEmitter<CascaderOption[]>;
    thySelect: EventEmitter<{
        option: CascaderOption;
        index: number;
    }>;
    thyChangeOn: (option: CascaderOption, level: number) => boolean;
    thyClear: EventEmitter<void>;
    input: ElementRef;
    menu: ElementRef;
    ngOnInit(): void;
    private initPosition;
    private initOptions;
    private activateOnInit;
    writeValue(value: any): void;
    afterWriteValue(): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    private isLoaded;
    getOptionLabel(option: CascaderOption): any;
    getOptionValue(option: CascaderOption): any;
    private hasInput;
    private hasValue;
    readonly showPlaceholder: boolean;
    isActivedOption(option: CascaderOption, index: number): boolean;
    private findOption;
    private buildDisplayLabel;
    isMenuVisible(): boolean;
    setMenuVisible(menuVisible: boolean): void;
    readonly menuCls: any;
    private setMenuClass;
    readonly menuColumnCls: any;
    private setMenuColumnClass;
    readonly arrowCls: any;
    private setArrowClass;
    readonly clearCls: any;
    private setClearClass;
    readonly labelCls: any;
    private setLabelClass;
    readonly inputCls: any;
    private setInputClass;
    private setClassMap;
    private isClickTriggerAction;
    private isHoverTriggerAction;
    private isClickExpandTriggerAction;
    private isHoverExpandTriggerAction;
    trggleClick($event: Event): void;
    trggleHover($event: Event): void;
    onOptionClick(option: CascaderOption, index: number, event: Event): void;
    onOptionMouseover(option: CascaderOption, index: number, event: Event): void;
    onMenuMouseleave(event: Event): void;
    closeMenu(): void;
    setActiveOption(option: CascaderOption, index: number, select: boolean, loadChildren?: boolean): void;
    private onSelectOption;
    private shouldPerformSelection;
    private onValueChange;
    clearSelection($event: Event): void;
    focus(): void;
    private loadChildren;
    private setColumnData;
    getSubmitValue(): any[];
    constructor(cdr: ChangeDetectorRef, elementRef: ElementRef, updateHostClassService: UpdateHostClassService);
}
